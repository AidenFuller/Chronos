@inject DegreeCourseService DegreeCourseService
@inject CourseService CourseService
@inject MajorCourseService MajorCourseService
@inject IBlazorDownloadFileService DownloadService
@inject IToastService ToastService
@inject SaveState State
@inject NavigationManager NavManager

@page "/DegreePlan"

@using Newtonsoft.Json;

@using Chronos.Shared.Tiles;

@*<div class="year-label">
        <h7><b>Year 1</b></h7>
    </div>

    <div class="year-label">
        <h7><b>Year 2</b></h7>
    </div>*@

<ul class="ColorCodelegend">
    <h5>Course Color Codes:</h5>
    <li><span class="Core"></span> Core</li>
    <li><span class="Compulsory"></span> Compulsory</li>
    <li><span class="Directed"></span> Directed</li>
    <li><span class="Elective"></span> Elective</li>
    <li><span class="AddDirected"></span> <b>+</b> Add Directed</li>
    <li><span class="AddElective"></span> <b>+</b> Add Elective</li>
    <li><span class="oi oi-question-mark"></span> Assumed Knowledge Error</li>
    <li><span class="oi oi-warning"></span> Hard Prerequisite Error</li>
    <li><span class="oi oi-link-broken"></span> Sibling Course Error</li>
</ul>
<hr />

@if (isReady)
{
    <button class="btn-light" onclick="location.href='/'"> Back to home page </button> 
    <CascadingValue Value="this">
        <div class="completedCourses" style="min-height: 20px; margin-bottom: 50px;">
            <TileSlot Tiles="@State.CompletedTiles" CompletedFlag="true" />
        </div>

        <div class="degreePlan">


        @*Pass boolean to determine if ghosts are showing to all children*@
        @if (State.CourseData == null)
        {
            <p>Loading...</p>
        }
        else
        {
            bool EOF = false;
            for (var enumerator = State.CourseData.GetEnumerator(); !EOF;)
            {
                <div class="year-row">
                    @for (int i = 0; i < State.BlocksPerYear; i++)
                    {
                        if (EOF = !enumerator.MoveNext())
                        {
                            break;
                        }
                        <p class="semester-label">Semester @(i + 1)</p>
                        <div class="semester">
                            @* Assuming Semesters *@

                                @if (i == 0)
                                {
                                    //Semester 1
                                    <TileSlot Tiles="@enumerator.Current" BlockType=@Models.Enums.CourseRuntime.Semester1 />
                                }
                                else
                                {
                                    //Semester 2
                                    <TileSlot Tiles="@enumerator.Current" BlockType=@Models.Enums.CourseRuntime.Semester2 />
                                }
                            </div>
                        }
                    </div>
                }

                <br />

                <div>
                    <div style="float:left">
                        <button @onclick="AddYear" class="btn-info">Add Year</button>
                    </div>


                    @*//-----------------------------------------------
                        //This button will remove the empty year
                        //----------------------------------------------*@

                    <div style="float:right;">
                        <button @onclick="RemoveYear" class="btn-danger">Remove Year</button>
                    </div>
                </div>

            }
        </div>
    </CascadingValue>

    <br />
    <br />
    <h4>Errors in List</h4>
    <div> <!--Shows the list of errors that is currently occurring with the plan.-->
        <h4>Errors:</h4>
        <p>@GetAllPrereqErrors()</p>
        <p>@GetAllSiblingErrors()</p>
        <h4>Warnings:</h4>
        <p>@GetAllPrereqWarnings()</p>
    </div>
    <button class="json-save" @onclick=@(async () => await DownloadService.DownloadFileFromText("degree-plan.json", JsonConvert.SerializeObject(State), "application/octet-stream"))>
        Save
    </button>

    <button class="json-save" @onclick=@(async () => await ResetAsync(true))>
        Reset Plan
    </button>
}
else
{
    <p>Loading...</p>
}

@code {
    
}

