@inject DegreeCourseService DegreeCourseService
@inject CourseService CourseService
@inject MajorCourseService MajorCourseService
@inject IBlazorDownloadFileService DownloadService
@inject IToastService ToastService
@inject SaveState State
@inject NavigationManager NavManager

@page "/DegreePlan"

@using Newtonsoft.Json;

@using Chronos.Shared.Tiles;

@*<div class="year-label">
        <h7><b>Year 1</b></h7>
    </div>

    <div class="year-label">
        <h7><b>Year 2</b></h7>
    </div>*@

<br />

<button class="dropbtn" @onclick="() => hideLegend = !hideLegend"><b>Looking for a color legend?</b></button>
<div hidden="@hideLegend">
    <h5>Course Color Codes:</h5>
    <ul class="ColorCodelegend">
        <li><span class="Core"></span> Core</li>
        <li><span class="Compulsory"></span> Compulsory</li>
        <li><span class="Directed"></span> Directed</li>
        <li><span class="Elective"></span> Elective</li>
        <li><span class="AddDirected"></span> <b>+</b> Add Directed</li>
        <li><span class="AddElective"></span> <b>+</b> Add Elective</li>
        <li><span class="oi oi-question-mark"></span> Assumed Knowledge Error</li>
        <li><span class="oi oi-warning"></span> Hard Prerequisite Error</li>
        <li><span class="oi oi-link-broken"></span> Sibling Course Error</li>
    </ul>
</div>
<hr />

<div>
    <h5>Instructions</h5>
    <ul>
        <li>
            Dragging: You are able to drag the tiles around on this page clicking and holding down the mouse button. Some effects this may have are:
            <ul>
                <li>Dropping the tile ontop of another tile will swap them IF they are can be swapped. The tile will have a green outline if this is applicable.</li>
                <li>Dropping this on the "invisible" tile that pops up will place it in that semester.</li>
                <li>Dropping this tile into the completed courses "invisible" tile will class it as a completed course.</li>
            </ul>
        </li>
        <li>
            If you change the placement of a tile, warnings and errors may occur. If these occur, they will appear in the bottom right, on the tile and on the error list to ensure that
            you can always track these problems.
        </li>
        <li>If you hover over a row in the error list, it will highlight the courses that have this error.</li>
        <li>If you hover over an error in a tile, it will highlight the tiles that are causing the error. </li>
        <li>If you left click on a tile, it will open the respective Newcastle University page for that course. </li>
    </ul>
</div>

@if (isReady)
{

    <div>
        <h4>Degree: @State.Degree.Name</h4>
        @if (!(State.Major.Name.Equals("Default")))
        {
            <h4>Major: @State.Major.Name</h4>
        }
    </div>
    <CascadingValue Value="this">

        <div class="degreePlan">


            @*Pass boolean to determine if ghosts are showing to all children*@
            @if (State.CourseData == null)
            {
                <p>Loading...</p>
            }
            else
            {
                bool EOF = false;
                for (var enumerator = State.CourseData.GetEnumerator(); !EOF;)
                {
                    <div class="year-row">
                        @for (int i = 0; i < State.BlocksPerYear; i++)
                        {
                            if (EOF = !enumerator.MoveNext())
                            {
                                break;
                            }
                            <p class="semester-label">Semester @(i + 1)</p>
                            @* Assuming Semesters *@

                            @if (i == 0)
                            {
                                //Semester 1
                                <div class="semester vertical-line">
                                    <TileSlot Tiles="@enumerator.Current" BlockType=@Models.Enums.CourseRuntime.Semester1 />
                                </div>
                            }
                            else
                            {
                                //Semester 2
                                <div class="semester">
                                    <TileSlot Tiles="@enumerator.Current" BlockType=@Models.Enums.CourseRuntime.Semester2 />
                                </div>
                            }
                        }
                    </div>
                }

                <br />

                <hr />

                <div class="degreePageButtons">
                    <div style="float:left; display:inline-block">
                        <button @onclick="AddYear" class="btnAdd">Add Year</button>
                    </div>



                    <div style="float: right; display: inline-block">
                        <button @onclick="RemoveYear" class="btnRemove">Remove Year</button>
                    </div>
                </div>

            }
        </div>


        <br />
        <br />






        <div style="display: flex; text-align: center;">
            <div style="flex: 0 0 49%; margin: 10px;">
                <h4>Completed Courses</h4>
                <div class="completedCourses">
                    <TileSlot Tiles="@State.CompletedTiles" CompletedFlag="true" />
                </div>
            </div>

            <div style="flex: 0 0 49%; margin: 10px; ">
                <h4>Errors</h4>
                <table class="ErrorTable">
                    @* Pre Req Errors *@
                    @foreach (var semester in State.CourseData)
                    {
                        @foreach (var tileData in semester)
                        {
                            @foreach (var error in tileData.GetPreReqErrors())
                            {
                                <tr class="PreReqError"
                                    @onmouseover="() => HighlightTile(error, tileData.Course)"
                                    @onmouseout="() => UnhighlightTile(error, tileData.Course)">
                                    <td>Prequisite Error</td>
                                    <td>
                                        <span style="font-weight:bold;">@error.CourseCode</span>
                                        must be completed the before
                                        <span style="font-weight:bold;">

                                            @tileData.Course.CourseCode
                                        </span>
                                    </td>
                                </tr>
                            }
                        }
                    }

                    @* Sibling Errors *@
                    @foreach (var semester in State.CourseData)
                    {
                        @foreach (var tileData in semester)
                        {
                            @foreach (var error in tileData.GetSiblingErrors())
                            {
                                <tr class="SiblingError"
                                    @onmouseover="() => HighlightTile(error, tileData.Course)"
                                    @onmouseout="() => UnhighlightTile(error, tileData.Course)">
                                    <td>Sibling Error</td>
                                    <td>
                                        <span style="font-weight:bold;">@error.CourseCode</span>
                                        must be completed the semester before
                                        <span style="font-weight:bold;">

                                            @tileData.Course.CourseCode
                                        </span>
                                    </td>
                                </tr>
                            }
                        }
                    }

                    @* Warnings *@

                    @foreach (var semester in State.CourseData)
                    {
                        @foreach (var tileData in semester)
                        {
                            @foreach (var error in tileData.GetPreReqWarnings())
                            {
                                <tr class="PreReqWarning"
                                    @onmouseover="() => HighlightTile(error, tileData.Course)"
                                    @onmouseout="() => UnhighlightTile(error, tileData.Course)">
                                    <td>Prerequisite Warning</td>
                                    <td>
                                        <span style="font-weight:bold;">@error.CourseCode</span>
                                        should be completed before
                                        <span style="font-weight:bold;">

                                            @tileData.Course.CourseCode
                                        </span>
                                    </td>
                                </tr>

                            }
                        }
                    }

                </table>
                <p></p>
            </div>
        </div>
        @* Container *@
    <div style="width:100%;" class="degreePageButtons">

        <div style="float: right;">
            <button class="jsonSave" @onclick=@(async () => await DownloadService.DownloadFileFromText("degree-plan.json", JsonConvert.SerializeObject(State), "application/octet-stream"))>
                Download Plan
            </button>
        </div>

        <div style="display: inline-block;">
            <button class="btnStartNew" onclick="location.href='/'"> Return Home </button>
        </div>

        <div style="float: left;">
            <button class="jsonReset" @onclick=@(async () => await ResetAsync(true))>
                Reset Plan
            </button>
        </div>
        @*<div class="planSave">
        </div>*@
    </div>


        <br />
        <br />
    </CascadingValue>
}


else
{
    <p>Loading...</p>
}

<hr />

