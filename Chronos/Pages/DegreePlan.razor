@inject DegreeCourseService DegreeCourseService
@inject CourseService CourseService
@inject MajorCourseService MajorCourseService
@inject IBlazorDownloadFileService DownloadService
@inject IToastService ToastService
@inject SaveState State
@inject NavigationManager NavManager

@page "/DegreePlan"

@using Newtonsoft.Json;

@using Chronos.Shared.Tiles;

@*<div class="year-label">
        <h7><b>Year 1</b></h7>
    </div>

    <div class="year-label">
        <h7><b>Year 2</b></h7>
    </div>*@

    <button class="dropbtn" @onclick="() => hideLegend = !hideLegend"><b>Looking for a color legend?</b></button>
    <div hidden="@hideLegend">
        <h5>Course Color Codes:</h5>
        <ul class="ColorCodelegend">
            <li><span class="Core"></span> Core</li>
            <li><span class="Compulsory"></span> Compulsory</li>
            <li><span class="Directed"></span> Directed</li>
            <li><span class="Elective"></span> Elective</li>
            <li><span class="AddDirected"></span> <b>+</b> Add Directed</li>
            <li><span class="AddElective"></span> <b>+</b> Add Elective</li>
            <li><span class="oi oi-question-mark"></span> Assumed Knowledge Error</li>
            <li><span class="oi oi-warning"></span> Hard Prerequisite Error</li>
            <li><span class="oi oi-link-broken"></span> Sibling Course Error</li>
        </ul>
    </div>     
<hr />

@if (isReady)
{
    <button class="btn-light" onclick="location.href='/'"> Back to home page </button> 
    <div>
        <h4>Degree: @State.Degree.Name</h4>
        @if(!(State.Major.Name.Equals("Default")))
        {
            <h4>Major: @State.Major.Name</h4>
        }
    </div>
    <CascadingValue Value="this">
        <div class="completedCourses" style="min-height: 20px; margin-bottom: 50px;">
            <TileSlot Tiles="@State.CompletedTiles" CompletedFlag="true" />
        </div>
            <div class="degreePlan">


                @*Pass boolean to determine if ghosts are showing to all children*@
                @if (State.CourseData == null)
                {
                    <p>Loading...</p>
                }
                else
                {
                    bool EOF = false;
                    for (var enumerator = State.CourseData.GetEnumerator(); !EOF;)
                    {
                        <div class="year-row">
                            @for (int i = 0; i < State.BlocksPerYear; i++)
                            {
                                if (EOF = !enumerator.MoveNext())
                                {
                                    break;
                                }
                                <p class="semester-label">Semester @(i + 1)</p>
                                <div class="semester">
                                    @* Assuming Semesters *@

                                    @if (i == 0)
                                    {
                                        //Semester 1
                                        <TileSlot Tiles="@enumerator.Current" BlockType=@Models.Enums.CourseRuntime.Semester1 />
                                    }
                                    else
                                    {
                                        //Semester 2
                                        <TileSlot Tiles="@enumerator.Current" BlockType=@Models.Enums.CourseRuntime.Semester2 />
                                    }
                                </div>
                            }
                        </div>
                    }

                    <br />

                    <div>
                        <div style="float:left">
                            <button @onclick="AddYear" class="btn-info">Add Year</button>
                        </div>


                        @*//-----------------------------------------------
                            //This button will remove the empty year
                            //----------------------------------------------*@

                        <div style="float:right;">
                            <button @onclick="RemoveYear" class="btn-danger">Remove Year</button>
                        </div>
                    </div>

                }
            </div>
        </CascadingValue>

    <br />
    <br />
    <h4>Errors:</h4>
    <div> <!--Shows the list of errors that is currently occurring with the plan.-->
        <table class="ErrorTable">
            @* Pre Req Errors *@
            @foreach (var semester in State.CourseData)
            {
                @foreach (var tileData in semester)
                {
                    @foreach (var error in tileData.GetPreReqErrors())
                    {
                        <tr class="PreReqError"
                            @onmouseover="() => HighlightTile(error, tileData.Course)"
                            @onmouseout="() => UnhighlightTile(error, tileData.Course)">
                            <td>PREREQ ERROR</td>
                            <td>
                                <span style="font-weight:bold;">@error.CourseCode</span>
                                must be completed the before
                                <span style="font-weight:bold;">

                                    @tileData.Course.CourseCode
                                </span>
                            </td>
                        </tr>
                    }
                }
            }

            @* Sibling Errors *@
            @foreach (var semester in State.CourseData)
            {
                @foreach (var tileData in semester)
                {
                    @foreach (var error in tileData.GetSiblingErrors())
                    {
                        <tr class="SiblingError"
                            @onmouseover="() => HighlightTile(error, tileData.Course)"
                            @onmouseout="() => UnhighlightTile(error, tileData.Course)">
                            <td>SIBLING ERROR</td>
                            <td>
                                <span style="font-weight:bold;">@error.CourseCode</span>
                                must be completed the semester before
                                <span style="font-weight:bold;">

                                    @tileData.Course.CourseCode
                                </span>
                            </td>
                        </tr>
                    }
                }
            }

            @* Warnings *@

            @foreach (var semester in State.CourseData)
            {
                @foreach (var tileData in semester)
                {
                    @foreach (var error in tileData.GetPreReqWarnings())
                    {
                        <tr class="PreReqWarning"
                            @onmouseover="() => HighlightTile(error, tileData.Course)"
                            @onmouseout="() => UnhighlightTile(error, tileData.Course)">
                            <td>PREREQ ERROR</td>
                            <td>
                                <span style="font-weight:bold;">@error.CourseCode</span>
                                should be completed before
                                <span style="font-weight:bold;">

                                    @tileData.Course.CourseCode
                                </span>
                            </td>
                        </tr>

                    }
                }
            }

        </table>
        <p></p>
    </div>
    <button class="json-save" @onclick=@(async () => await DownloadService.DownloadFileFromText("degree-plan.json", JsonConvert.SerializeObject(State), "application/octet-stream"))>
        Save
    </button>

    <button class="json-save" @onclick=@(async () => await ResetAsync(true))>
        Reset Plan
    </button>
}
else
{
    <p>Loading...</p>
}

@code {
    
}

