@page "/Admin/EditMajor"

@inject MajorService MajorService
@inject DegreeService DegreeService
@inject IToastService ToastService

<div class="adminform">
    <BlazoredTypeahead SearchMethod="SearchDegrees" @bind-Value="SelectedDegree" placeholder="Please search for the course to be removed..." EnableDropDown="true" ShowDropDownOnFocus="true">
        <SelectedTemplate Context="degree">
            Bachelor of @degree.Name
        </SelectedTemplate>
        <ResultTemplate Context="degree">
            Bachelor of @degree.Name
        </ResultTemplate>
    </BlazoredTypeahead>

    @if (SelectedDegree != null)
    {
        <BlazoredTypeahead SearchMethod="SearchMajors" @bind-Value="SelectedMajor" placeholder="Please search for a major..." EnableDropDown="true" ShowDropDownOnFocus="true">
            <SelectedTemplate Context="major">
                @major.Name
            </SelectedTemplate>
            <ResultTemplate Context="major">
                @major.Name
            </ResultTemplate>
        </BlazoredTypeahead>
    }

    @if (SelectedMajor != null)
    {
        <EditForm OnSubmit="ReplaceMajor" Model="SelectedMajor">
            <h4>Major Name</h4>
            <InputText @bind-Value="SelectedMajor.Name" placeholder="Enter Major Name" required />
            <button type="submit" class="submit-button submit-button-colour submit-button-animation">Edit Major</button>
        </EditForm>
    }
</div>

@code {
    private Major SelectedMajor;
    private Degree SelectedDegree;
    private IEnumerable<Major> Majors;
    private IEnumerable<Degree> Degrees;

    protected override async Task OnInitializedAsync()
    {
        Degrees = await DegreeService.GetAllDegreesAsync();
    }

    private async Task ReplaceMajor()
    {
        await MajorService.ReplaceMajorAsync(SelectedMajor);
        ToastService.ShowToast(ToastLevel.Success, $"The degree has been updated");
    }

    private async Task<IEnumerable<Degree>> SearchDegrees(string search)
    {
        return await Task.FromResult(Degrees.Where(x => x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.Name).ToList()); //It will return degrees that contain the string in its name.
    }

    private async Task<IEnumerable<Major>> SearchMajors(string search)
    {
        Majors = await MajorService.GetMajorsFromDegreeAsync(SelectedDegree.DegreeID);
        return await Task.FromResult(Majors.Where(x => x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.Name).ToList()); //It will return degrees that contain the string in its name.
    }
}
