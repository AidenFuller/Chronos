@page "/Admin/RemovePrerequisite"

@inject CourseService CourseService
@inject IToastService ToastService

<div class="adminform">
    <EditForm OnSubmit="SubmitPrerequisites" Model="PCM">
        <h4>Select Course</h4>
        <BlazoredTypeahead SearchMethod="SearchCourses" @bind-Value="PCM.Course" placeholder="Please search for your course..." EnableDropDown="true" ShowDropDownOnFocus="true">
            <SelectedTemplate Context="course">
                <!--This is the search Template and what will be returned.-->
                @course.CourseCode - @course.Name
            </SelectedTemplate>
            <ResultTemplate Context="course">
                <!--This is what is shown when it is selected.-->
                @course.CourseCode - @course.Name
            </ResultTemplate>
        </BlazoredTypeahead>

        <h4>Select the course which is to be removed</h4>
        <BlazoredTypeahead SearchMethod="SearchPrerequisites" @bind-Value="PCM.Prerequisite" placeholder="Please search for your course..." EnableDropDown="true" ShowDropDownOnFocus="true">
            <SelectedTemplate Context="course">
                <!--This is the search Template and what will be returned.-->
                @course.CourseCode - @course.Name
            </SelectedTemplate>
            <ResultTemplate Context="course">
                <!--This is what is shown when it is selected.-->
                @course.CourseCode - @course.Name
            </ResultTemplate>
        </BlazoredTypeahead>

        <button type="submit" class="submit-button submit-button-colour submit-button-animation">Remove Prerequisite</button>
    </EditForm>
</div>

@code
{
    private PrerequisiteModel PCM;
    private IEnumerable<Course> Courses;
    private IEnumerable<Course> Prerequisites;
    private Course selectedCourse;

    protected override async Task OnInitializedAsync()
    {
        PCM = new PrerequisiteModel();
        Courses = await CourseService.GetAllCoursesAsync();
    }

    private async Task<IEnumerable<Course>> SearchPrerequisites(string search)
    {
        if (PCM.Course == null)
            return new List<Course>();

        if (Prerequisites == null || selectedCourse != PCM.Course)
        {
            Prerequisites = await CourseService.GetPrerequisiteCoursesAsync(PCM.Course.CourseID);
            selectedCourse = PCM.Course;
        }
        return await Task.FromResult(Prerequisites.Where(x => PCM.Course.CourseID != x.CourseID && x.CourseCode.ToLower().Contains(search.ToLower()) || x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.CourseCode).ToList());
    }

    private async Task SubmitPrerequisites()
    {
        if (PCM.Course == null || PCM.Course.CourseID == 0)
        {
            ToastService.ShowToast(ToastLevel.Error, "Please select a course");
            return;
        }

        var prereqs = await CourseService.GetPrerequisiteCoursesAsync(PCM.Course.CourseID);
        if (prereqs.Any(c => c.CourseID == PCM.Prerequisite.CourseID))
        {
            await CourseService.RemovePrerequisiteAsync(PCM.Course.CourseID, PCM.Prerequisite.CourseID);
            ToastService.ShowToast(ToastLevel.Success, $"{PCM.Prerequisite.CourseCode} has been removed as a prerequisite for {PCM.Course.CourseCode}");
            PCM = new PrerequisiteModel();
        }
        else
        {
            ToastService.ShowToast(ToastLevel.Error, $"{PCM.Prerequisite.CourseCode} is not a prerequisite for {PCM.Course.CourseCode}");
        }
    }

    private async Task<IEnumerable<Course>> SearchCourses(string search)
    {
        return await Task.FromResult(Courses.Where(x => x.CourseCode.ToLower().Contains(search.ToLower()) || x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.CourseCode).ToList());//Finds courses based on if they contain the string in their name or course code.
    }

    private class PrerequisiteModel
    {
        public Course Course { get; set; }
        public Course Prerequisite { get; set; }
    }
}

