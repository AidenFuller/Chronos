@page "/Admin/RemoveDegree"

@inject DegreeService DegreeService
@inject IToastService ToastService

<div class="adminform">
    <h4>Select a Degree</h4>
    <BlazoredTypeahead SearchMethod="SearchDegrees" @bind-Value="SelectedDegree" placeholder="Please search for the degree you want to remove..." EnableDropDown="true" ShowDropDownOnFocus="true">
        <SelectedTemplate Context="degree">
            Bachelor of @degree.Name
        </SelectedTemplate>
        <ResultTemplate Context="degree">
            Bachelor of @degree.Name
        </ResultTemplate>
    </BlazoredTypeahead>

    @if (processing)
    {
        <div class="spinner"></div>
    }
    else
    {
        <button @onclick="SubmitDegree" type="submit" class="submit-button submit-button-colour submit-button-animation">Remove Degree</button>
    }
</div>

@code {

    private IEnumerable<Degree> Degrees;
    private Degree SelectedDegree;
    private bool processing;

    protected override async Task OnInitializedAsync()
    {
        processing = false;
        Degrees = await DegreeService.GetAllDegreesAsync();
    }

    private async Task SubmitDegree()
    {
        processing = true;
        if (await DegreeService.DoesDegreeExist(SelectedDegree.Name))
        {
            await DegreeService.RemoveDegreeAsync(SelectedDegree);
            ToastService.ShowToast(ToastLevel.Success, $"{SelectedDegree.Name} was removed from the database");
        }
        else
        {
            ToastService.ShowToast(ToastLevel.Warning, "Something went wrong");
        }
        processing = false;
    }

    private async Task<IEnumerable<Degree>> SearchDegrees(string search)
    {
        return await Task.FromResult(Degrees.Where(x => x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.Name).ToList()); //It will return degrees that contain the string in its name.
    }

}
