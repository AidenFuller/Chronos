@page "/Admin/AddCourseAvailability"

@inject CourseService CourseService
@inject IToastService ToastService

<div class="adminform">
    <EditForm OnSubmit="SubmitAvailability" Model="CA">
        <h4>Select Course</h4>
        <BlazoredTypeahead SearchMethod="SearchCourses" @bind-Value="CA.Course" placeholder="Please search for your course..." EnableDropDown="true" ShowDropDownOnFocus="true">
            <SelectedTemplate Context="course">
                <!--This is the search Template and what will be returned.-->
                @course.CourseCode - @course.Name
            </SelectedTemplate>
            <ResultTemplate Context="course">
                <!--This is what is shown when it is selected.-->
                @course.CourseCode - @course.Name
            </ResultTemplate>
        </BlazoredTypeahead>

        <h4>Select the Campus</h4>
        <select class="form-control selectpicker" @bind="CA.Campus">
            <option value="@AvailableCampus.Callaghan">Callaghan</option>
            <option value="@AvailableCampus.Ourimbah">Ourimbah</option>
            <option value="@AvailableCampus.NewcastleCity">NUSpace</option>
            <option value="@AvailableCampus.PortMacquarie">Port Macquarie</option>
        </select>

        <h4>Select the Runtimes</h4>
        <div class="inputGroup">
            <input type="checkbox" id="sem1" name="sem1" @bind="s1" />
            <label for="sem1">Semester 1</label>
        </div>
        <div class="inputGroup">
            <input type="checkbox" id="sem2" name="sem2" @bind="s2" />
            <label for="sem2">Semester 2</label>
        </div>

        <button type="submit" class="submit-button submit-button-colour submit-button-animation">Submit Course</button>
    </EditForm>
</div>

@code
{
    private CAModel CA;
    private IEnumerable<Course> Courses;

    private bool s1, s2;

    protected override async Task OnInitializedAsync()
    {
        CA = new CAModel();
        CA.Runtime = 0;
        Courses = await CourseService.GetAllCoursesAsync();
    }

    private async Task SubmitAvailability()
    {
        CA.Runtime |= s1 ? CourseRuntime.Semester1 : 0;
        CA.Runtime |= s2 ? CourseRuntime.Semester2 : 0;

        if (CA.Runtime == 0)
        {
            ToastService.ShowToast(ToastLevel.Error, $"Please select at least one runtime");
        }
        else if (await CourseService.GetCourseRuntimeAsync(CA.Course.CourseID, CA.Campus) == 0)
        {
            CourseAvailability courseAvailability = new CourseAvailability()
            {
                Campus = CA.Campus,
                CourseID = CA.Course.CourseID,
                Runtime = CA.Runtime
            };
            await CourseService.AddCourseAvailability(courseAvailability);
            ToastService.ShowToast(ToastLevel.Success, $"{CA.Course.CourseCode} has been allocated at the {CA.Campus} campus for {CA.Runtime}");
        }
        else
        {
            ToastService.ShowToast(ToastLevel.Error, $"{CA.Course.CourseCode} has already been allocated at the {CA.Campus} campus");
        }
    }

    private async Task<IEnumerable<Course>> SearchCourses(string search)
    {
        return await Task.FromResult(Courses.Where(x => x.CourseCode.ToLower().Contains(search.ToLower()) || x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.CourseCode).ToList());//Finds courses based on if they contain the string in their name or course code.
    }

    private class CAModel
    {
        public Course Course { get; set; }
        public AvailableCampus Campus { get; set; } = AvailableCampus.Callaghan;
        public CourseRuntime Runtime { get; set; }
    }
}
