@page "/Admin"
@inject CourseService CourseService
@inject IToastService ToastService

@using System.Text.RegularExpressions

@inject DegreeService DegreeService
@inject IToastService ToastService

@using System.Text.RegularExpressions  

<h3>Administration</h3>
<EditForm OnSubmit="SubmitCourse" Model="course">
    <h4>Course Name</h4>
    <InputText @bind-Value=course.Name placeholder="Enter Course Name" required />
    <h4>Course Code</h4>
    <InputText @bind-Value=course.CourseCode placeholder="Enter Course Code" required />
    <h4>Units</h4>
    <InputNumber step="10" @bind-Value=course.Units />
    <h4>Required Units for Enrolment</h4>
    <InputNumber step="10" @bind-Value=course.RequiredCompletedUnits />

    <button type="submit" class="submit-button submit-button-colour submit-button-animation">Submit Course</button>
</EditForm>

<EditForm OnSubmit="SubmitDegree" Model="degree">
    <h4>Degree Name</h4>
    <InputText @bind-Value="degree.Name" placeholder="Enter Degree Name" required />
    <h4>Amount Of Units</h4>
    <InputNumber step="20" @bind-Value="degree.UnitLength" />
    <h4>Can it be completed internationally?</h4>
    <InputCheckbox @bind-Value="degree.InternationalsAllowed" />
    <h4>How many Elective Units?</h4>
    <InputNumber step="10" @bind-Value="degree.ElectiveUnits" />

    <button type="submit" class="submit-button submit-button-colour submit-button-animation">Submit Degree</button>
</EditForm>



@code 
{
    private Degree degree;
    private Degree NewDegree() => new Degree() { UnitLength = 240 };
    private Course NewCourse() => new Course() { Units = 10 };
    private Course course;

    protected override void OnInitialized()
    {
        degree = NewDegree();
    }

    private async Task SubmitDegree()
    {
        bool degreeError = false;
        if(await DegreeService.DoesDegreeExist(degree.Name))
        {
            degreeError = true;

            ToastService.ShowToast(ToastLevel.Error, "A degree with this name already exists in the Database.");
        }
        if (degree.UnitLength < 240)
        {
            degreeError = true;
            ToastService.ShowToast(ToastLevel.Error, "A degree must be a minimum of 3 years.");
        }

        if(!degreeError)
        {
            await DegreeService.AddDegreeAsync(degree);
            ToastService.ShowToast(ToastLevel.Success, "Added to the database!");
            degree = new Degree();
        }
    }

    protected override void OnInitialized()
    {
        course = NewCourse();
    }

    private async Task SubmitCourse()
    {
        bool error = false;
        Regex regex = new Regex(@"[A-Za-z]{4}\d{4}[ABab]?");
        if (!regex.IsMatch(course.CourseCode))
        {
            error = true;
            //error
            ToastService.ShowToast(ToastLevel.Error, "Course Code must match the format ABCD1234(A)");
        }
        if (course.Units <= 0)
        {
            error = true;
            //error
            ToastService.ShowToast(ToastLevel.Error, "Units must be greater than 0");
        }
        if (course.RequiredCompletedUnits < 0)
        {
            error = true;
            //stuff
            ToastService.ShowToast(ToastLevel.Error, "Required Units must be greater than or equal to 0");
        }
        if (await CourseService.DoesCourseExist(course.CourseCode.ToUpper()))
        {
            error = true;
            //stuff
            ToastService.ShowToast(ToastLevel.Error, "A course with this course code already exists in the database");
        }


        if (!error)
        {
            course.CourseCode = course.CourseCode.ToUpper();
            await CourseService.AddCourseAsync(course);
            ToastService.ShowToast(ToastLevel.Success, $"{course.CourseCode} has been added to the database!");
            course = NewCourse();
        }

    }


    
}
