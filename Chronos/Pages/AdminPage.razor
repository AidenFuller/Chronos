@page "/Admin"
@inject CourseService CourseService
@inject IToastService ToastService

@using System.Text.RegularExpressions

<h3>Administration</h3>
<EditForm OnSubmit="SubmitCourse" Model="course">
    <h4>Course Name</h4>
    <InputText @bind-Value=course.Name placeholder="Enter Course Name" required />
    <h4>Course Code</h4>
    <InputText @bind-Value=course.CourseCode placeholder="Enter Course Code" required />
    <h4>Units</h4>
    <InputNumber step="10" @bind-Value=course.Units />
    <h4>Required Units for Enrolment</h4>
    <InputNumber step="10" @bind-Value=course.RequiredCompletedUnits />

    <button type="submit" class="submit-button submit-button-colour submit-button-animation">Submit Course</button>
</EditForm>





<EditForm OnSubmit="SubmitPrerequisites" Model="PCM">
    <h4>Select Course</h4>
    <BlazoredTypeahead SearchMethod="SearchCourses" @bind-Value="PCM.Course" placeholder="Please search for your course..." EnableDropDown="true" ShowDropDownOnFocus="true">
        <SelectedTemplate Context="course">
            <!--This is the search Template and what will be returned.-->
            @course.CourseCode - @course.Name
        </SelectedTemplate>
        <ResultTemplate Context="course">
            <!--This is what is shown when it is selected.-->
            @course.CourseCode - @course.Name
        </ResultTemplate>
    </BlazoredTypeahead>

    <h4>Select the course which is required to be completed prior</h4>
    <BlazoredTypeahead SearchMethod="SearchPrerequisites" @bind-Value="PCM.Prerequisite" placeholder="Please search for your course..." EnableDropDown="true" ShowDropDownOnFocus="true">
        <SelectedTemplate Context="course">
            <!--This is the search Template and what will be returned.-->
            @course.CourseCode - @course.Name
        </SelectedTemplate>
        <ResultTemplate Context="course">
            <!--This is what is shown when it is selected.-->
            @course.CourseCode - @course.Name
        </ResultTemplate>
    </BlazoredTypeahead>

    <h4>Select the constraint type</h4>
    <select class="form-control selectpicker" @bind="PCM.Type">
        <option value="-1">Please select ...</option>
        <option value="@RequisiteType.AssumedKnowledge">Assumed Knowledge</option>
        <option value="@RequisiteType.HardRequisite">Hard Requisite</option>
        <option value="@RequisiteType.MustPreceed">Must Preceed (Sibling Course)</option>
    </select>

    <button type="submit" class="submit-button submit-button-colour submit-button-animation">Submit Course</button>
</EditForm>

@code {

    private Course course;

    private IList<Course> RequiredCourses;

    private PrerequisiteModel PCM;

    private Course _selectedCourse;
    private Course SelectedCourse
    {
        get
        {
            return _selectedCourse;
        }
        set
        {
            _selectedCourse = value;
            ExistingPrerequisites = CourseService.GetPrerequisiteCoursesAsync(_selectedCourse.CourseID).GetAwaiter().GetResult();
        }
    }

    private IEnumerable<Course> Courses;
    private IEnumerable<Course> ExistingPrerequisites;

    protected override async Task OnInitializedAsync()
    {
        course = NewCourse();
        RequiredCourses = new List<Course>();
        PCM = new PrerequisiteModel();
        Courses = await CourseService.GetAllCoursesAsync();
    }

    private async Task SubmitCourse()
    {
        bool error = false;
        Regex regex = new Regex(@"[A-Za-z]{4}\d{4}[ABab]?");
        if (!regex.IsMatch(course.CourseCode))
        {
            error = true;
            //error
            ToastService.ShowToast(ToastLevel.Error, "Course Code must match the format ABCD1234(A)");
        }
        if (course.Units <= 0)
        {
            error = true;
            //error
            ToastService.ShowToast(ToastLevel.Error, "Units must be greater than 0");
        }
        if (course.RequiredCompletedUnits < 0)
        {
            error = true;
            //stuff
            ToastService.ShowToast(ToastLevel.Error, "Required Units must be greater than or equal to 0");
        }
        if (await CourseService.DoesCourseExist(course.CourseCode.ToUpper()))
        {
            error = true;
            //stuff
            ToastService.ShowToast(ToastLevel.Error, "A course with this course code already exists in the database");
        }


        if (!error)
        {
            course.CourseCode = course.CourseCode.ToUpper();
            await CourseService.AddCourseAsync(course);
            ToastService.ShowToast(ToastLevel.Success, $"{course.CourseCode} has been added to the database!");
            course = NewCourse();
        }

    }


    private async Task SubmitPrerequisites()
    {
        if (PCM.Course == null || PCM.Course.CourseID == 0)
        {
            ToastService.ShowToast(ToastLevel.Error, "Please select a course");
            return;
        }

        var prereqs = await CourseService.GetPrerequisiteCoursesAsync(PCM.Course.CourseID);
        if (prereqs.Any(c => c.CourseID == PCM.Prerequisite.CourseID))
        {
            ToastService.ShowToast(ToastLevel.Error, $"{PCM.Prerequisite.CourseCode} is already a prerequisite for {PCM.Course.CourseCode}");
        }
        else
        {
            await CourseService.AddPrerequisiteAsync(PCM.Course.CourseID, PCM.Prerequisite.CourseID, PCM.Type);
            ToastService.ShowToast(ToastLevel.Success, $"{PCM.Prerequisite.CourseCode} has been added as a prerequisite for {PCM.Course.CourseCode}");
        }
    }

    private async Task<IEnumerable<Course>> SearchCourses(string search)
    {
        return await Task.FromResult(Courses.Where(x => x.CourseCode.ToLower().Contains(search.ToLower()) || x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.CourseCode).ToList());//Finds courses based on if they contain the string in their name or course code.
    }

    private async Task<IEnumerable<Course>> SearchPrerequisites(string search)
    {
        if ((PCM.Course?.CourseID ?? 0) == 0)
        {
            return new List<Course>();
        }
        else
        {
            return await Task.FromResult(Courses.Where(x => PCM.Course.CourseID != x.CourseID && x.CourseCode.ToLower().Contains(search.ToLower()) || x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.CourseCode).ToList());
        }
    }

    private Course NewCourse() => new Course() { Units = 10 };


    private class PrerequisiteModel
    {
        public Course Course { get; set; }
        public Course Prerequisite { get; set; }
        public RequisiteType Type { get; set; } = (RequisiteType) (-1);
    }
}
