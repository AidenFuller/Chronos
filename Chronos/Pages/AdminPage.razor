@page "/Admin"
@inject CourseService CourseService
@inject IToastService ToastService
@inject DegreeService DegreeService
@inject DegreeCourseService DegreeCourseService

@using System.Text.RegularExpressions

@inject DegreeService DegreeService
@inject IToastService ToastService

@using System.Text.RegularExpressions  

<h3>Administration</h3>
<EditForm OnSubmit="SubmitCourse" Model="course">
    <h4>Course Name</h4>
    <InputText @bind-Value=course.Name placeholder="Enter Course Name" required />
    <h4>Course Code</h4>
    <InputText @bind-Value=course.CourseCode placeholder="Enter Course Code" required />
    <h4>Units</h4>
    <InputNumber step="10" @bind-Value=course.Units />
    <h4>Required Units for Enrolment</h4>
    <InputNumber step="10" @bind-Value=course.RequiredCompletedUnits />

    <button type="submit" class="submit-button submit-button-colour submit-button-animation">Submit Course</button>
</EditForm>
<EditForm OnSubmit="SubmitDegreeToCourse" Model="DCM">
    <h4>Select a Degree to add a course to</h4>
    <h4>Select a Degree</h4>
    <BlazoredTypeahead SearchMethod="SearchDegrees" @bind-Value="DCM.Degree" placeholder="Please search for the degree you want to add to..." EnableDropDown="true" ShowDropDownOnFocus="true">
        <SelectedTemplate Context="degree">
            Bachelor of @degree.Name
        </SelectedTemplate>
        <ResultTemplate Context="degree">
            Bachelor of @degree.Name
        </ResultTemplate>
    </BlazoredTypeahead>
    <h4>Select a Course</h4>
    <BlazoredTypeahead SearchMethod="SearchCourses" @bind-Value="DCM.Course" placeholder="Please search for the degree you want to add to..." EnableDropDown="true" ShowDropDownOnFocus="true">
        <SelectedTemplate Context="course">
            @course.Name (@course.CourseCode)
        </SelectedTemplate>
        <ResultTemplate Context="course">
            @course.Name (@course.CourseCode)
        </ResultTemplate>
    </BlazoredTypeahead>
    <button type="submit" class="submit-button submit-button-colour submit-button-animation">Submit Course</button>
</EditForm>

<EditForm OnSubmit="SubmitDegree" Model="degree">
    <h4>Degree Name</h4>
    <InputText @bind-Value="degree.Name" placeholder="Enter Degree Name" required />
    <h4>Amount Of Units</h4>
    <InputNumber step="20" @bind-Value="degree.UnitLength" />
    <h4>Can it be completed internationally?</h4>
    <InputCheckbox @bind-Value="degree.InternationalsAllowed" />
    <h4>How many Elective Units?</h4>
    <InputNumber step="10" @bind-Value="degree.ElectiveUnits" />

    <button type="submit" class="submit-button submit-button-colour submit-button-animation">Submit Degree</button>
</EditForm>


@code 
{
    private Degree degree;
    private Degree NewDegree() => new Degree() { UnitLength = 240 };
    private Course NewCourse() => new Course() { Units = 10 };
    private Course course;
    private DegreeCourseModel DCM = new DegreeCourseModel();
    protected IEnumerable<Degree> Degrees { get; set; }
    protected IEnumerable<Course> Courses { get; set; }
    protected async override Task OnInitializedAsync()
    {
        course = NewCourse();
        Degrees = await DegreeService.GetAllDegreesAsync();
        Courses = await CourseService.GetAllCoursesAsync();
        degree = NewDegree();
    }
    //This function will find courses based on what string is passed into the function.
    private async Task<IEnumerable<Course>> SearchCourses(string search)
    {
        return await Task.FromResult(Courses.Where(x => x.CourseCode.ToLower().Contains(search.ToLower()) || x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.CourseCode).ToList());//Finds courses based on if they contain the string in their name or course code.
    }
    //This function will find degrees based on the string that is passed in.
    private async Task<IEnumerable<Degree>> SearchDegrees(string search)
    {
        return await Task.FromResult(Degrees.Where(x => x.Name.ToLower().Contains(search.ToLower())).OrderBy(x => x.Name).ToList()); //It will return degrees that contain the string in its name.
    }

    private async Task SubmitDegreeToCourse()
    {
        bool error = false;
        if (DCM.Course == null)
        {
            error = true;
            ToastService.ShowToast(ToastLevel.Error, "You did not select a Course");
        }
        if (DCM.Degree == null)
        {
            error = true;
            ToastService.ShowToast(ToastLevel.Error, "You did not select a degree");
        }
        if (await DegreeCourseService.DoesCourseExistInDegree(DCM.Course.CourseCode, DCM.Degree.DegreeID))
        {
            error = true;
            ToastService.ShowToast(ToastLevel.Error, "This course is already in this degree.");
        }
        if (!error)
        {
            await DegreeCourseService.AddCourseToDegreeAsync(DCM.Degree.DegreeID, DCM.Course.CourseID);
            ToastService.ShowToast(ToastLevel.Success, $"{DCM.Course.CourseCode} has been added to the Bachelor of {DCM.Degree.Name}.");
        }
    }
    private async Task SubmitDegree()
    {
        bool degreeError = false;
        if(await DegreeService.DoesDegreeExist(degree.Name))
        {
            degreeError = true;

            ToastService.ShowToast(ToastLevel.Error, "A degree with this name already exists in the Database.");
        }
        if (degree.UnitLength < 240)
        {
            degreeError = true;
            ToastService.ShowToast(ToastLevel.Error, "A degree must be a minimum of 3 years.");
        }

        if(!degreeError)
        {
            await DegreeService.AddDegreeAsync(degree);
            ToastService.ShowToast(ToastLevel.Success, "Added to the database!");
            degree = new Degree();
        }
    }

    private async Task SubmitCourse()
    {
        bool error = false;
        Regex regex = new Regex(@"[A-Za-z]{4}\d{4}[ABab]?");
        if (!regex.IsMatch(course.CourseCode))
        {
            error = true;
            //error
            ToastService.ShowToast(ToastLevel.Error, "Course Code must match the format ABCD1234(A)");
        }
        if (course.Units <= 0)
        {
            error = true;
            //error
            ToastService.ShowToast(ToastLevel.Error, "Units must be greater than 0");
        }
        if (course.RequiredCompletedUnits < 0)
        {
            error = true;
            //stuff
            ToastService.ShowToast(ToastLevel.Error, "Required Units must be greater than or equal to 0");
        }
        if (await CourseService.DoesCourseExist(course.CourseCode.ToUpper()))
        {
            error = true;
            //stuff
            ToastService.ShowToast(ToastLevel.Error, "A course with this course code already exists in the database");
        }


        if (!error)
        {
            course.CourseCode = course.CourseCode.ToUpper();
            await CourseService.AddCourseAsync(course);
            ToastService.ShowToast(ToastLevel.Success, $"{course.CourseCode} has been added to the database!");
            course = NewCourse();
        }

    }



    private class DegreeCourseModel
    {
        public Degree Degree { get; set; }
        public Course Course { get; set; }
    }

}
