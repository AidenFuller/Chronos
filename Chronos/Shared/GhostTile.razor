



@if (fastHide == false)
{
    <div class="@hide @expand Tile" @ondrop="HandleDrop"
         @ondragenter="HandleDragEnter"
         @ondragleave="HandleDragLeave" ondragover="event.preventDefault()">
    </div>
}








@code {
    //[Parameter] public TileData payload { get; set; }

    //Show or hide with animation
    [Parameter] public bool show { get; set; }
    [CascadingParameter] TileSlot Slot { get; set; }
    [CascadingParameter] DegreePlan Plan { get; set; }

    private string expand = "";
    //Hiding = Ready for animation
    private string hide = "Hiding";
    //Hidden = Element not rendered

    //Remove the element quickly without animation
    private bool fastHide = false;

    protected override void OnParametersSet()
    {

        //Show with animation
        if (show == true)
        {
            //Show the tile
            hide = "";
        }


        else
        {
            //In hiding state, reset everything
            fastHide = false;
            hide = "Hiding";
            expand = "";


            //await Task.Delay(510);
            //hide = "Hidden";
        }
    }


    // Handling Dropping
    private void HandleDrop()
    {
        //Hide element without animation

        //FastHide works by toggling so the div gets unrendered. When OnParameter retriggered and it is set to false again. 
        fastHide = true;
        hide = "Hidden";
        show = false;
        Plan.movePayloadTo(Slot);
        StateHasChanged();
    }



    private void HandleDragEnter()
    {
        //Add class "Expand" so it will expand
        expand = "Expand";

    }
    private void HandleDragLeave()

    {
        expand = "";
    }




}
