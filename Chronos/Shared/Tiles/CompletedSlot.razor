
<div style="width:100%; height:100%; min-height: 50px; border-style: solid; border-color: green;">


    @* Display the tiles *@
    @foreach (TileData tile in Tiles)
    {
        <div class="CompletedCourseDiv">
            CourseID: @tile.Course.CourseCode
            Description: @tile.Course.Name
            Units: @tile.Course.Units
            Treated as: @tile?.TileType
        </div>
    }

    @* Manage ghost tile *@
    <GhostTile Show="@showGhost" CompletedFlag="true"/>





</div>

@code {
    [Parameter]
    public List<TileData> Tiles { get; set; }

    [Parameter]
    public Models.Enums.CourseRuntime BlockType { get; set; }

    [CascadingParameter]
    public DegreePlan Plan { get; set; }

    private bool showGhost = false;

    protected override void OnParametersSet()
    {

        Console.WriteLine(BlockType);
        //Error Management
        foreach (TileData tile in Tiles)
        {
            if (tile.Course == null) continue;
            if ((tile.Runtime & BlockType) == 0)
            {
                tile.Status |= ErrorStatus.WrongSemester;
            }
            //Console.WriteLine($"{tile.Course.Name}, {tile.Status} : {tile.Course.Runtime}, {BlockType}, {tile.Course.Runtime & BlockType}");
        }

        //===== GhostTile Management =====
        //Ghosts are showing AND this tile slot is not the origin AND the payload runs in this semester
        if (Plan.ShowGhosts == true && !Tiles.Contains(Plan.DragPayload))
        {
            showGhost = true;
        }
        //Don't show the ghost of this tile slot
        else
        {
            showGhost = false;
        }
    }
}
