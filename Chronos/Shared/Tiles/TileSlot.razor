@using Chronos.Shared.Tiles;
@using Chronos.Shared.Modals;

<CascadingValue Value="this">

    @if (CompletedFlag == false)
    {
        @foreach (TileData tile in Tiles)
        {
            <Tile Data=@tile />
        }

        <GhostTile show="@showGhost" />
    }
    else
    {
        @foreach (TileData tile in Tiles)
        {
            <Tile Data=@tile CompletedFlag=@CompletedFlag/>
        }

        <GhostTile Show="@showGhost" CompletedFlag=@CompletedFlag/>
    }


    @* Determine if this ghost should be shown *@
    @* Ghosts are currently showing *@




</CascadingValue>

@code {
    [Parameter]
    public List<TileData> Tiles { get; set; }

    [Parameter]
    public Models.Enums.CourseRuntime BlockType { get; set; }

    [Parameter]
    public bool CompletedFlag { get; set; } = false;

    [CascadingParameter]
    public DegreePlan Plan { get; set; }

    private bool showGhost = false;




    protected override void OnParametersSet()
    {

        Console.WriteLine(BlockType);
        //Error Management
        foreach (TileData tile in Tiles)
        {
            if (tile.Course == null) continue;
            if ((tile.Runtime & BlockType) == 0)
            {
                tile.Status |= ErrorStatus.WrongSemester;
            }
            //Console.WriteLine($"{tile.Course.Name}, {tile.Status} : {tile.Course.Runtime}, {BlockType}, {tile.Course.Runtime & BlockType}");
        }

        //===== GhostTile Management =====
        //Ghosts are showing AND this tile slot is not the origin AND the payload runs in this semester
        if (Plan.ShowGhosts == true && !Tiles.Contains(Plan.DragPayload) && runsInSlot(Plan.DragPayload))
        {
            showGhost = true;
        }
        //Don't show the ghost of this tile slot
        else
        {
            showGhost = false;
        }
    }

    //Returns if a course runs in this slot
    private bool runsInSlot(TileData td)
    {
        if (CompletedFlag == true)
        {
            return true;
        }
        if (td.Course == null)
        {
            //Empty tile, runs anywhere
            return true;
        }
        return td.Runtime.Equals(BlockType);
    }


}
