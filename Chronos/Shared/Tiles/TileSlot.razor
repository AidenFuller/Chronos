@using Chronos.Shared.Tiles;
@using Chronos.Shared.Modals;

<CascadingValue Value="this">
    @foreach (TileData tile in Tiles)
    {
        <Tile Data=@tile />
    }

    @* Determine if this ghost should be shown *@
    @* Ghosts are currently showing *@

    <GhostTile show="@showGhost"/>


</CascadingValue>

@code {
    [Parameter]
    public List<TileData> Tiles { get; set; }

    [Parameter]
    public Models.Enums.CourseRuntime BlockType { get; set; }

    [CascadingParameter]
    public DegreePlan Plan { get; set; }

    private bool showGhost = false;
    private readonly int TOTAL_UNITS_ALLOWED = 50;




    protected override void OnParametersSet()
    {

        Console.WriteLine(BlockType);
        //Error Management
        foreach (TileData tile in Tiles)
        {
            if (tile.Course == null) continue;
            if ((tile.Runtime & BlockType) == 0)
            {
                tile.Status |= ErrorStatus.WrongSemester;
            }
            //Console.WriteLine($"{tile.Course.Name}, {tile.Status} : {tile.Course.Runtime}, {BlockType}, {tile.Course.Runtime & BlockType}");
        }

        //===== GhostTile Management =====
        //Ghosts are showing AND this tile slot is not the origin AND the payload runs in this semester
        if (Plan.ShowGhosts == true && !Tiles.Contains(Plan.DragPayload) && runsInSlot(Plan.DragPayload) && HowManyUnits() != TOTAL_UNITS_ALLOWED)
        {
            showGhost = true;
        }
        //Don't show the ghost of this tile slot
        else
        {
            showGhost = false;
        }
    }

    //Returns if a course runs in this slot
    private bool runsInSlot(TileData td)
    {
        if (td.Course == null)
        {
            //Empty tile, runs anywhere
            return true;
        }
        return td.Runtime.Equals(BlockType);
    }

    private int HowManyUnits()
    {
        int totalUnits = 0;
        foreach (TileData tile in Tiles)
        {
            if (tile.Course == null)
            {
                totalUnits += 10;
            }
            else
            {
                totalUnits += tile.Course.Units;
            }
        }
        return totalUnits;
    }
}
