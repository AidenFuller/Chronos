@inject CourseService courseService
@using Chronos.Shared.Enums;
@using Chronos.Shared.Modals;

<div class="@dropClass @highlightClass @tileClass @typeClass @errorClass" draggable="true" @ondragstart="@HandleDragStart" @onclick="Clicked"
        ondragover="event.preventDefault()"
        @ondrop="HandleDropAsync"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave"
        @ondragend="HandleDragEnd">



    @if (CompletedFlag)
    {
        //This tile is in the completed box
        <div style=" width:100%;">
            @Data.Course.CourseCode - @Data.Course.Name - @Data.Course.Units Units
        </div>
    }
    else if (Data.Course is null)
    {
        @if (Data.TileType == TileType.Core)
        {
            //Core Course -- Should never go down this path
            <h3>Error</h3>
        }
        else
        {
            //Directed Course or Elective
            <div class="plusSign">+</div>
        }
    }
    else
    {
        <div class="ErrorSymbol">
            @if ((ErrorStatus.MissingAssumedKnowledge & Data.Status) > 0)
            {
                <div class="Tooltip"
                    @onmouseover="() => Plan.HighlightTile(Data.GetPreReqWarnings())"
                     @onmouseout="() => Plan.UnhighlightTile(Data.GetPreReqWarnings())"
                     >
                    @*<span class="oi oi-question-mark"></span>*@
                    <img class="ErrorIcon"  src="/images/Orange.png"/>
                    <span class="ToolTipText">
                        Missing Assumed Knowledge:
                        @String.Join(", ", @Data.GetPreReqWarnings().Select(course => course.CourseCode))
                    </span>
                </div>
            }
            @if ((ErrorStatus.MissingPrerequisite & Data.Status) > 0)
            {
                <div class="Tooltip"
                    @onmouseover="() => Plan.HighlightTile(Data.GetPreReqErrors())"
                    @onmouseout="() => Plan.UnhighlightTile(Data.GetPreReqErrors())">
                    @*<span class="oi oi-warning"></span>*@
                    <img class="ErrorIcon"  src="/images/Red.png"/>
                    <span class="ToolTipText">
                        Missing Pre-requisite:
                        @String.Join(", ", @Data.GetPreReqErrors().Select(course => course.CourseCode))

                    </span>
                </div>
            }
            @if ((ErrorStatus.MissingSiblingCourse & Data.Status) > 0)
            {
                <div class="Tooltip"
                        @onmouseover="() => Plan.HighlightTile(Plan.GetPreSiblingErrorsCombined(Data).Result)"
                        @onmouseout="() => Plan.UnhighlightTile(Plan.GetPreSiblingErrorsCombined(Data).Result)"
                     >
                    @*<span class="oi oi-link-broken"></span>*@

                    <img class="ErrorIcon" src="/images/Purple.png"/>
                    <span class="ToolTipText">
                        Missing sibling course:
                        @String.Join(", ", Plan.GetPreSiblingErrorsCombined(Data).Result.Select(course => course.CourseCode))

                    </span>
                </div>
            }
        </div>

        @if (Data.TileType != TileType.Compulsory && Data.TileType != TileType.Core)
        {

        <div class="TrashButton" @onclick="TrashButton" @onclick:stopPropagation="true">
            <p>&#10006;</p>
        </div>
         } 

        //Course

        //---------------------------------------
        //This piece of code will get the data from database and show to user
        //Some Inline CSS to make it work
        //--------------------------------------------




            <div style ="pointer-events: none;" class="courseCode">
                @*---------------------------------------------
                    //This div is to show course code on top of the tile
                    //hr tag margin 0 to remove the white space in between the line
                    ---------------------------------------------*@
                <span> @Data.Course.CourseCode </span>
                <hr style="margin-bottom:0px; margin-top:0px;" />
            </div>
        



        <div style ="pointer-events: none;" class="courseName">

            @*--------------------------------------------------
                //This div is to show the course name
                //Inline css and external ccs reference done here to change effect while hover on
                ---------------------------------------------------*@

            <p style="font-size:13px;"> @Data.Course.Name </p>
        </div>

        <div style ="pointer-events: none;" class="courseDes">

            @*//---------------------------------------------------
                //This piece of code is to show Units, Semester and available campus
                //Div looping to make it organise
                //Using Inline flex and with that float to use 2 divs in the same line and locate that left or right
                //hr margins are used for removing the white space
                //---------------------------------------------------*@

            <div>
                <hr style="margin-bottom:0px; margin-top:-15px;" />
                <div style="word-wrap:break-word; white-space:nowrap;">
                    <div>
                        <span style="font-size:12px; display:block; float:inline-start"><b> Units: @Data.Course.Units</b> </span>
                    </div>
                    <div>
                        @*//----------------------------------------
                            //Can put letter wrap or overflow wrap to Anywhere/Break-word when testing data will be modified to test multiple sems and location
                            //Delete this comment before final submission
                            //-----------------------------------------*@
                        <span style="font-size: 12px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; "><b>@SemesterStringOut(Data.Runtime)</b> </span>
                    </div>

                    @*//-------------------------------------------------
                        //This br tags are blocking the white spaces
                        //-------------------------------------------------*@

                </div>
            </div>
        </div>
    }

</div>

@code {

    #region Fields
    private string tileClass; //CSS class based on TileType
    private string typeClass; //CSS class based on TileType
    private string errorClass; //Css class based on Errors. 
    private string highlightClass;
    private string dropClass;
    #endregion

    #region Cascading Parameters
    [CascadingParameter] private DegreePlan Plan { get; set; }
    [CascadingParameter] private TileSlot Slot { get; set; }
    [CascadingParameter] private IModalService Modal { get; set; }
    #endregion

    #region Parameters
    [Parameter] public TileData Data { get; set; }
    [Parameter] public bool CompletedFlag { get; set; } = false;
    #endregion



    #region Constructor
    protected override void OnParametersSet()
    {
        if (CompletedFlag)
        {
            tileClass = "CompletedCourse";
        }
        else
        {
            tileClass = "Tile";
        }

        errorClass = string.Empty;
        highlightClass = string.Empty;


        UpdateTileType();
    }
    #endregion

    #region Functions
    private void UpdateTileType()
    {
        typeClass = string.Empty;
        errorClass = string.Empty;
        dropClass = string.Empty;

        if (Plan.Highlights.Exists(c => c.CourseCode == Data.Course?.CourseCode))
        {
            highlightClass = "Highlight";
        }
        else
        {
            highlightClass = string.Empty;
        }

        switch (Data.TileType)
        {
            case TileType.Core:
                typeClass += "Core";
                break;
            case TileType.Compulsory:
                typeClass += "Compulsory";
                break;
            case TileType.Directed:
                if (Data.Course is null)
                {
                    typeClass += "AddDirected";
                }
                else
                {
                    typeClass += "Directed";
                }
                break;
            case TileType.Elective:
                if (Data.Course is null)
                {
                    typeClass += "AddElective";
                }
                else
                {
                    typeClass += "Elective";
                }
                break;
        }

        if (!CompletedFlag)
        {
            if (Data.Course is not null)
            {
                if (Data.Course.Units == 20) //Checks to see if it is a double course. 
                {
                    typeClass += " DoubleUnits";
                }
            }
            if ((Data.Status & (ErrorStatus.MissingPrerequisite | ErrorStatus.WrongCampus | ErrorStatus.WrongSemester | ErrorStatus.MissingSiblingCourse)) > 0) //Checks to see i fit has any errors. 
            {
                errorClass += "Error";
            }
            else if ((Data.Status & ErrorStatus.MissingAssumedKnowledge) > 0) //CHecks to see if it has any warnings. 
            {
                errorClass += "Warning";
            }
        }
    }

    //This is what will run when a course is clicked on. 
    private async void Clicked()
    {
        if (Data.Course is not null) //If the course exists, it will show the University page for it. 
        {
            var parameters = new ModalParameters();
            var url = $"https://www.newcastle.edu.au/course/{Data.Course.CourseCode}";
            parameters.Add("url", url);
            var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                Animation = ModalAnimation.FadeInOut(0.5),
                Class = "Tile-Modal"
            };
            Modal.Show<IFrame>(Data.Course.CourseCode, parameters, options);
        }
        else //If the course does not, it will run a modal that will allow them to add either an elective or directed course. 
        {
            var parameters = new ModalParameters();
            parameters.Add("Plan", Plan);
            parameters.Add("InputSem", Slot.BlockType);
            var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                Animation = ModalAnimation.FadeInOut(0.5),
                Class = "Tile-Modal"
            };

            IModalReference form = null;
            if (Data.TileType == TileType.Elective)
            {
                form = Modal.Show<AddElectiveModal>("Add an Elective Course", parameters, options);

            }
            else if (Data.TileType == TileType.Directed)
            {
                //Directed course
                form = Modal.Show<AddDirectedModal>("Add a Directed course", parameters, options);
            }
            else
            {
                Console.WriteLine("Massive error");
            }

            var result = await form.Result;

            if (!result.Cancelled)
            {
                Data.Course = (Course) result.Data;
                Data.Runtime = await courseService.GetCourseRuntimeAsync(Data.Course.CourseID, Plan.Campus);
                await Plan.UpdateTileErrors(Data, Slot.Tiles);
                UpdateTileType();
                Plan.ActivateStateHasChanged();
            }

        }
        //If null, open menu to add a course to it
    }

    private void HandleDragStart()
    {
        //Pass values back to plan
        Plan.DragPayload = Data;
        Plan.DragFrom = Slot.Tiles;
        Plan.BlockTypeFrom = Slot.BlockType;

        //Show ghost tiles
        Plan.ShowGhostTiles();
    }
    private void HandleDragEnd()
    {
        //Hide ghost tiles
        Plan.HideGhostTiles();
    }

    private void HandleDragEnter()
    {
        if (Data != Plan.DragPayload && Plan.CanDataRunInBlock(Slot.BlockType, Data))
        {
            dropClass = "droppable";
        }
    }
    private void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    private async Task HandleDropAsync()
    {
        dropClass = string.Empty;
        if (Data == Plan.DragPayload) return;
        await Plan.UpdateDegreePlanAsync(Slot.Tiles, Data, Slot.BlockType);
    }

    private String SemesterStringOut(CourseRuntime c)
    {
        String courseStr = c.ToString();
        String s = "Semesters: " + courseStr;

        s = s.Replace("Semester1", "1");
        s = s.Replace("Semester2", "2");

        return s;
    }

    //This will run when the button in the top right is clicked, deleting the data in the tile. 
    private void TrashButton()
    {
        Data.ClearAllWarnings();
        Data.Course = null;
        UpdateTileType();
        Plan.ActivateStateHasChanged();
    }
    #endregion
}
