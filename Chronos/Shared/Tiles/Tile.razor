@inject CourseService courseService
@using Chronos.Shared.Enums;
@using Chronos.Shared.Modals;
    <button class="Tile @tileClass" draggable="true" @ondragstart="@HandleDragStart" @onclick="Clicked"
            ondragover="event.preventDefault()"
            @ondrop="HandleDrop"
            @ondragenter="HandleDragEnter"
            @ondragleave="HandleDragLeave"
            @ondragend="HandleDragEnd"
            >

        @if (Data.Course is null)
        {
            @if (Data.TileType == TileType.Core)
            {
                //Core Course -- Should never go down this path
                <h3>Error</h3>
            }
            else
            {
                //Directed Course or Elective
                <h1>+</h1>
            }
        }
        else
        {
            //Course
            <h3> @Data.Course.CourseCode </h3>
            <p> @Data.Course.Name </p>
        }

    </button>
@*</div>*@

@code {

    [CascadingParameter]
    DegreePlan Plan { get; set; }

    [CascadingParameter]
    TileSlot Slot { get; set; }

    [Parameter]
    public TileData Data { get; set; }

    //[Parameter]
    //public string Width { get; set; } = "200px";

    //private string Height = "100px";

    [CascadingParameter] public IModalService Modal { get; set; }

    private string tileClass; //CSS class based on TileType

    public void UpdateTileType()
    {
        if (Data.Status == 0)
        {
            switch (Data.TileType)
            {
                case TileType.Core:
                    tileClass = "Core";
                    break;
                case TileType.Directed:
                    if (Data.Course is null)
                    {
                        tileClass = "AddDirected";
                    }
                    else
                    {
                        tileClass = "Directed";
                    }

                    break;
                case TileType.Elective:
                    if (Data.Course is null)
                    {
                        tileClass = "AddElective";
                    }
                    else
                    {
                        tileClass = "Elective";
                    }
                    break;
            }
        }

        switch (Data.Status)
        {
            case ErrorStatus.Error | ErrorStatus.Warning:
            case ErrorStatus.Error:
                tileClass = "Error";
                break;
            case ErrorStatus.Warning:
                tileClass = "Warning";
                break;
        }
    }


    async void Clicked()
    {
        if (Data.Course is not null)
        {
            var parameters = new ModalParameters();
            var url = "https://www.newcastle.edu.au/course/" + Data.Course.CourseCode;
            parameters.Add("url", url);
            var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                Animation = ModalAnimation.FadeInOut(0.5),
                //ContentScrollable = true,
                Class = "Tile-Modal"
            };
            Modal.Show<IFrame>(Data.Course.CourseCode, parameters, options);
        }
        else{
            var parameters = new ModalParameters();
            parameters.Add("Plan", Plan);
            parameters.Add("SemType", Slot.BlockType);
            var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                Animation = ModalAnimation.FadeInOut(0.5),
                //ContentScrollable = true,
                Class = "Tile-Modal"
            };

            IModalReference form = null;
            if (Data.TileType == TileType.Elective)
            {
                form = Modal.Show<AddElectiveModal>("Add an Elective Course", parameters, options);

            }
            else if (Data.TileType == TileType.Directed)
            {
                //Directed course
                form = Modal.Show<AddDirectedModal>("Add a Directed course", parameters, options);

            }

            var result = await form.Result;

            if (!result.Cancelled)
            {
                Data.Course = (Course) result.Data;
                UpdateTileType();
                StateHasChanged();
            }

        }
        //If null, open menu to add a course to it
    }

    private void HandleDragStart()
    {
        //Pass values back to plan
        Plan.DragPayload = Data;
        Plan.DragFrom = Slot.Tiles;
        Plan.BlockTypeFrom = Slot.BlockType;

        //Show ghost tiles
        Plan.ShowGhostTiles();

    }

    private void HandleDragEnd()
    {
        //Hide ghost tiles
        Plan.HideGhostTiles();
    }


    string dropClass = "";

    private void HandleDragEnter()
    {
        if (Data != Plan.DragPayload)
        {
            dropClass = "droppable";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
        if (Data == Plan.DragPayload) return;
        await Plan.UpdateDegreePlanAsync(Slot.Tiles, Data, Slot.BlockType);
    }


    protected override void OnParametersSet()
    {
        UpdateTileType();

        if ((Data.Status & ErrorStatus.Error) > 0)
        {
            Plan.ErrorCount++;
        }

        if ((Data.Status & ErrorStatus.Warning) > 0)
        {
            Plan.WarningCount++;
        }
    }

}
