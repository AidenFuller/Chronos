



@if (fastHide == false)
{
    if (CompletedFlag == false)
    {
        <div class="@hide @expand Tile" @ondrop="HandleDrop"
             @ondragenter="HandleDragEnter"
             @ondragleave="HandleDragLeave" ondragover="event.preventDefault()">
        </div>
    }
    else
    {
        <div class="@hide @expand CompletedTile" @ondrop="HandleDrop"
             @ondragenter="HandleDragEnter"
             @ondragleave="HandleDragLeave" ondragover="event.preventDefault()">
        </div>
    }

}

@code {
    //Core control to show or hide the tile
    [Parameter]
    public bool Show { get; set; } = false;

    [Parameter]
    public bool CompletedFlag { get; set; } = false;

    [CascadingParameter]
    TileSlot Slot { get; set; }

    [CascadingParameter]
    DegreePlan Plan { get; set; }

    //Expand = make fatter
    //Blank = Skinny
    private string expand = "";

    //Blank = Showing
    //Hiding = Ready for animation
    //Hidden = Element not rendered
    private string hide = "Hiding";

    //Remove the element quickly without animation
    private bool fastHide = false;

    protected override void OnParametersSet()
    {
        //Show with animation
        if (Show == true)
        {
            //Show the tile
            hide = "";
        }
        else
        {
            //In hiding state, reset everything
            fastHide = false;
            hide = "Hiding";
            expand = "";

        }
    }


    // Handling Dropping
    private async Task HandleDrop()
    {
        //FastHide works by toggling so the div gets unrendered. When OnParameter retriggered and it is set to false again.
        fastHide = true;
        hide = "Hidden";
        Show = false;
        await Plan.MovePayloadTo(Slot.Tiles);
        //StateHasChanged();
    }



    private void HandleDragEnter()
    {
        //Add class "Expand" so it will expand
        expand = "Expand";

    }
    private void HandleDragLeave()
    {
        expand = "";
    }




}
