@if (!fastHide)
{
    if (!CompletedFlag)
    {
        <div class="@hide @expand Tile" @ondrop="HandleDropAsync"
             @ondragenter="HandleDragEnter"
             @ondragleave="HandleDragLeave" ondragover="event.preventDefault()">
        </div>
    }
    else
    {
        <div class="@hide @expand CompletedTile" @ondrop="HandleDropAsync"
             @ondragenter="HandleDragEnter"
             @ondragleave="HandleDragLeave" ondragover="event.preventDefault()">
        </div>
    }

}

@code {
    //Core control to show or hide the tile
    [Parameter] public bool Show { get; set; } = false;
    [Parameter] public bool CompletedFlag { get; set; } = false;

    [CascadingParameter] TileSlot Slot { get; set; }
    [CascadingParameter] DegreePlan Plan { get; set; }

    //Expand = make fatter
    //Blank = Skinny
    private string expand;

    //Blank = Showing
    //Hiding = Ready for animation
    //Hidden = Element not rendered
    private string hide;

    //Remove the element quickly without animation
    private bool fastHide;

    protected override void OnParametersSet()
    {
        expand = string.Empty;
        fastHide = false;
        //Show with animation
        if (Show)
        {
            //Show the tile
            hide = string.Empty;
        }
        else
        {
            //In hiding state, reset everything
            hide = "Hiding";
        }
    }

    // Handling Dropping
    private async Task HandleDropAsync()
    {
        fastHide = true;
        hide = "Hidden";
        Show = false;
        await Plan.MovePayloadAsync(Slot.Tiles);
    }

    private void HandleDragEnter()
    {
        //Add class "Expand" so it will expand
        expand = "Expand";
    }
    private void HandleDragLeave()
    {
        // Remove the css class
        expand = string.Empty;
    }
}
