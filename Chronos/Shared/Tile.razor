@inject CourseService courseService
@using Chronos.Shared.Enums;

<style>
    .Tile {
        border-style: solid;
        border-radius: 20px;
        display: inline-block;
        text-align: center;

        

        float: left;
        margin: 5px;
        /*font-size: small;*/
    }

        .Tile:hover {
            transition: .2s;
            transform: scale(1.1)
        }

    .droppable {
        background-color: greenyellow;
    }

    .Elective {
        background-color: #F2DD60
    }

    .Directed {
        background-color: #458EE7
    }

    .Core {
        background-color: #808080
    }

    .AddElective {
        background-color: #ffffff;
        border-color: #000000;
        color: #F2DD60;
    }

    .AddDirected {
        background-color: #ffffff;
        border-color: #000000;
        color: #458EE7;
    }

    .Tile-Modal {
        display: flex;
        z-index: 102;
        flex-direction: column;
        background-color: #fff;
        /*background-color: rgba(0,0,0,0);*/
        border-radius: 20px;
        border: 1px solid #fff;
        padding: 1.5rem;
        box-shadow: 0 2px 2px rgba(0,0,0,0.25);
        /*width: 80%;
        height: 80%;*/

        /*overflow: hidden;*/
    }
</style>


<button class="Tile @tileClass" style="width:@Width; height:@Height;" draggable="true" @ondragstart="@HandleDragStart" @onclick="Clicked"
     ondragover="event.preventDefault()"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">

    @if (Course is null)
    {
        @if (Type == TileType.Core)
        {
            //Core Course -- Should never go down this path
            <h3>Error</h3>
        }
        else
        {
            //Directed Course or Elective
            <h1>+</h1>
        }
    }
    else
    {
        //Course
        <h3> @Course.CourseCode </h3>
        <p> @Course.Name </p>
    }

</button>


@code {

    [CascadingParameter]
    DegreePlan Plan { get; set; }

    [CascadingParameter]
    TileSlot Slot { get; set; }

    [Parameter]
    public TileType Type { get; set; }

    [Parameter]
    public Course Course { get; set; }

    [Parameter]
    public string Width { get; set; } = "200px";

    private string Height = "100px";

    [CascadingParameter] public IModalService Modal { get; set; }

    private string tileClass; //CSS class based on TileType

    public void UpdateTileType()
    {
        switch (Type)
        {
            case TileType.Core:
                tileClass = "Core";
                break;
            case TileType.Directed:
                if (Course is null)
                {
                    tileClass = "AddDirected";
                }
                else
                {
                    tileClass = "Directed";
                }

                break;
            case TileType.Elective:
                if (Course is null)
                {
                    tileClass = "AddElective";
                }
                else
                {
                    tileClass = "Elective";
                }
                break;
        }
    }
    protected override void OnInitialized()
    {
        Console.WriteLine("Testing");
        UpdateTileType();
    }

    void Clicked()
    {
        if (Course is not null)
        {
            var parameters = new ModalParameters();
            var url = "https://www.newcastle.edu.au/course/" + Course.CourseCode;
            parameters.Add("url", url);
            var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                Animation = ModalAnimation.FadeInOut(0.5),
                //ContentScrollable = true,
                Class = "Tile-Modal"
            };
        Modal.Show<IFrame>(Course.CourseCode, parameters, options);
    }
    //If null, open menu to add a course to it
}

    private void HandleDragStart()
    {
        Plan.DragPayload = Course;
        Plan.DragFrom = Slot.Courses;
    }


    string dropClass = "";

    private void HandleDragEnter()
    {
        if (Course.CourseID != Plan.DragPayload.CourseID)
        {
            dropClass = "droppable";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
        if (Course.CourseID == Plan.DragPayload.CourseID) return;
        await Plan.UpdateDegreePlanAsync(Slot.Courses, Course);

        Console.WriteLine("spam");
    }

}
