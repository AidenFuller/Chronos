@inject CourseService courseService
@using Chronos.Shared.Enums;
<style>

</style>
<button class="Tile @tileClass" style="width:@Width; height:@Height;" draggable="true" @ondragstart="@HandleDragStart" @onclick="Clicked"
     ondragover="event.preventDefault()"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">

    @if (Data.Course is null)
    {
        @if (Data.TileType == TileType.Core)
        {
            //Core Course -- Should never go down this path
            <h3>Error</h3>
        }
        else
        {
            //Directed Course or Elective
            <h1>+</h1>
        }
    }
    else
    {
        //Course
        <h3> @Data.Course.CourseCode </h3>
        <p> @Data.Course.Name </p>
    }

</button>


@code {

    [CascadingParameter]
    DegreePlan Plan { get; set; }

    [CascadingParameter]
    TileSlot Slot { get; set; }

    [Parameter]
    public TileData Data { get; set; }

    [Parameter]
    public string Width { get; set; } = "200px";

    private string Height = "100px";

    [CascadingParameter] public IModalService Modal { get; set; }

    private string tileClass; //CSS class based on TileType

    public void UpdateTileType()
    {
        if (Data.Status == 0)
        {
            switch (Data.TileType)
            {
                case TileType.Core:
                    tileClass = "Core";
                    break;
                case TileType.Directed:
                    if (Data.Course is null)
                    {
                        tileClass = "AddDirected";
                    }
                    else
                    {
                        tileClass = "Directed";
                    }

                    break;
                case TileType.Elective:
                    if (Data.Course is null)
                    {
                        tileClass = "AddElective";
                    }
                    else
                    {
                        tileClass = "Elective";
                    }
                    break;
            }
        }

        switch (Data.Status)
        {
            case ErrorStatus.Error | ErrorStatus.Warning:
            case ErrorStatus.Error:
                tileClass = "Error";
                break;
            case ErrorStatus.Warning:
                tileClass = "Warning";
                break;
        }
    }


    void Clicked()
    {
        if (Data.Course is not null)
        {
            var parameters = new ModalParameters();
            var url = "https://www.newcastle.edu.au/course/" + Data.Course.CourseCode;
            parameters.Add("url", url);
            var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                Animation = ModalAnimation.FadeInOut(0.5),
                //ContentScrollable = true,
                Class = "Tile-Modal"
            };
            Modal.Show<IFrame>(Data.Course.CourseCode, parameters, options);
        }
        //If null, open menu to add a course to it
    }

    private void HandleDragStart()
    {
        Plan.DragPayload = Data;
        Plan.DragFrom = Slot.Tiles;
    }


    string dropClass = "";

    private void HandleDragEnter()
    {
        if (Data != Plan.DragPayload)
        {
            dropClass = "droppable";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
        if (Data == Plan.DragPayload) return;
        await Plan.UpdateDegreePlanAsync(Slot.Tiles, Data);

        Console.WriteLine("spam");
    }


    protected override void OnParametersSet()
    {
        UpdateTileType();

        if ((Data.Status & ErrorStatus.Error) > 0)
        {
            Plan.ErrorCount++;
        }

        if ((Data.Status & ErrorStatus.Warning) > 0)
        {
            Plan.WarningCount++;
        }
    }

}
