@inject CourseService courseService
@using Chronos.Shared.Enums;

<button class="Tile @tileClass" draggable="true" @ondragstart="@HandleDragStart" @onclick="Clicked"
        ondragover="event.preventDefault()"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave"
        @ondragend="HandleDragEnd">

    @if (Data.Course is null)
    {
        @if (Data.TileType == TileType.Core)
        {
            //Core Course -- Should never go down this path
            <h3>Error</h3>
        }
        else
        {
            //Directed Course or Elective
            <h1>+</h1>
        }
    }
    else
    {

        //Course

        //---------------------------------------
        //This piece of code will get the data from database and show to user
        //Some Inline CSS to make it work
        //--------------------------------------------

        <div>
            @*-----------------------------------------------------------
                //Removing this for now
                //Probablhy add later if needed
                //This is the code to see course type
                //Delete or add entirely before final submission

                <div class="courseType">
                    <h7><b>@Data.TileType</b></h7>
                    <hr style="margin-bottom:0px; margin-top:0px;" />
                </div>
                --------------------------------------------------------------*@

            @*---------------------------------------------
                //This div is to show course code on top of the tile
                //hr tag margin 0 to remove the white space in between the line
                ---------------------------------------------*@
            <div class="courseCode">
                <h7> @Data.Course.CourseCode </h7>
                <hr style="margin-bottom:0px; margin-top:0px;" />
            </div>

            @*--------------------------------------------------
                //This div is to show the course name
                //Inline css and external ccs reference done here to change effect while hover on
                ---------------------------------------------------*@

            <div class="courseName">
                <p style=" font-size: 12px;"> @Data.Course.Name </p>
            </div>
        </div>

        //---------------------------------------------------
        //This piece of code is to show Units, Semester and available campus
        //Div looping to make it organise
        //Using Inline flex and with that float to use 2 divs in the same line and locate that left or right
        //hr margins are used for removing the white space
        //---------------------------------------------------

        <div class="courseDes">
            <div>
                <hr style="margin-bottom:0px; margin-top:-15px;" />
                <div>
                    <div>
                        <p style="font-size:12px; display:inline-flex; float:inline-start"><b> Units: @Data.Course.Units</b> </p>
                    </div>
                    <div>
                        @*//----------------------------------------
                        //Can put letter wrap or overflow wrap to Anywhere/Break-word when testing data will be modified to test multiple sems and location
                        //Delete this comment before final submission
                        //-----------------------------------------*@
                        <p style="font-size: 12px; display: inline-flex; float: inline-end;"><b>@Data.Course.Runtime</b> </p>
                    </div>
                </div>
                <div style="margin-bottom:0px; margin-top:-15px;">
                    <p style="font-size:12px;"><b>@Data.Course.Campus</b> </p>
                </div>
            </div>
        </div>
    }

</button>

@code {

    [CascadingParameter]
    DegreePlan Plan { get; set; }

    [CascadingParameter]
    TileSlot Slot { get; set; }

    [Parameter]
    public TileData Data { get; set; }

    //[Parameter]
    //public string Width { get; set; } = "200px";

    //private string Height = "100px";

    [CascadingParameter] public IModalService Modal { get; set; }

    private string tileClass; //CSS class based on TileType

    public void UpdateTileType()
    {
        if (Data.Status == 0)
        {
            switch (Data.TileType)
            {
                case TileType.Core:
                    tileClass = "Core";
                    break;
                case TileType.Directed:
                    if (Data.Course is null)
                    {
                        tileClass = "AddDirected";
                    }
                    else
                    {
                        tileClass = "Directed";
                    }

                    break;
                case TileType.Elective:
                    if (Data.Course is null)
                    {
                        tileClass = "AddElective";
                    }
                    else
                    {
                        tileClass = "Elective";
                    }
                    break;
            }
        }

        switch (Data.Status)
        {
            case ErrorStatus.Error | ErrorStatus.Warning:
            case ErrorStatus.Error:
                tileClass = "Error";
                break;
            case ErrorStatus.Warning:
                tileClass = "Warning";
                break;
        }
    }


    void Clicked()
    {
        if (Data.Course is not null)
        {
            var parameters = new ModalParameters();
            var url = "https://www.newcastle.edu.au/course/" + Data.Course.CourseCode;
            parameters.Add("url", url);
            var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                Animation = ModalAnimation.FadeInOut(0.5),
                //ContentScrollable = true,
                Class = "Tile-Modal"
            };
            Modal.Show<IFrame>(Data.Course.CourseCode, parameters, options);
        }
        //If null, open menu to add a course to it
    }

    private void HandleDragStart()
    {
        //Pass values back to plan
        Plan.DragPayload = Data;
        Plan.DragFrom = Slot.Tiles;

        //Show ghost tiles
        Plan.showGhostTiles();

    }

    private void HandleDragEnd()
    {
        //Hide ghost tiles
        Plan.hideGhostTiles();
    }


    string dropClass = "";

    private void HandleDragEnter()
    {
        if (Data != Plan.DragPayload)
        {
            dropClass = "droppable";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
        if (Data == Plan.DragPayload) return;
        await Plan.UpdateDegreePlanAsync(Slot.Tiles, Data);
    }


    protected override void OnParametersSet()
    {
        UpdateTileType();

        if ((Data.Status & ErrorStatus.Error) > 0)
        {
            Plan.ErrorCount++;
        }

        if ((Data.Status & ErrorStatus.Warning) > 0)
        {
            Plan.WarningCount++;
        }
    }

}
