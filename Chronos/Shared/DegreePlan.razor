@inject DegreeCourseService DegreeCourseService
@inject CourseService CourseService
@inject MajorCourseService MajorCourseService
@inject IBlazorDownloadFileService DownloadService
@inject IToastService ToastService 
@using Newtonsoft.Json;

@using Chronos.Shared.Tiles;

@*<div class="year-label">
    <h7><b>Year 1</b></h7>
</div>

<div class="year-label">
    <h7><b>Year 2</b></h7>
</div>*@
<CascadingValue Value="this">


        <div class="completedCourses" style="min-height: 20px; margin-bottom: 50px;">
            <TileSlot Tiles="@completedData" CompletedFlag="true" />
        </div>

<div class="degreePlan">
    <CascadingValue Value="this">
        @*Pass boolean to determine if ghosts are showing to all children*@
        @if (courseData == null)
        {
            <p>Loading...</p>
        }
        else
        {
            bool EOF = false;
            for (var enumerator = courseData.GetEnumerator(); !EOF;)
            {
                <div class="year-row">
                    @for (int i = 0; i < BlocksPerYear; i++)
                    {
                        if (EOF = !enumerator.MoveNext())
                        {
                            break;
                        }
                        <h6 class="semester-label">Semester @(i + 1)</h6>
                        <div class="semester">
                            @* Assuming Semesters *@

                            @if (i == 0)
                            {
                                //Semester 1
                                <TileSlot Tiles="@enumerator.Current" BlockType=@Models.Enums.CourseRuntime.Semester1 />
                            }
                            else
                            {
                                //Semester 2
                                <TileSlot Tiles="@enumerator.Current" BlockType=@Models.Enums.CourseRuntime.Semester2 />
                            }
                        </div>
                    }
                </div>
            }

                <button @onclick="AddYear">Add Year</button>

            }
        </div>
    </CascadingValue>


<div class="json-save" @onclick=@(async () => await DownloadService.DownloadFileFromText("degree-plan.json", Serialize(), "application/octet-stream"))>
    Save
</div>


@code {
    //Parameters
    [Parameter] public int BlocksPerYear { get; set; } = 2;
    [Parameter] public int UnitsPerBlock { get; set; } = 40;
    [Parameter] public Degree Degree { get; set; }
    [Parameter] public Major Major { get; set; }
    [Parameter] public List<Course> CompletedCourses { get; set; }
    [Parameter] public AvailableCampus Campus { get; set; }
    [Parameter] public string JSON { get; set; } = null;
    [Parameter] public CourseRuntime RuntimeStart { get; set; } = CourseRuntime.Semester1;


    private List<TileData> completedData;
    private List<List<TileData>> courseData;
    private int blockSize = 2;
    private bool fiftyUnitsWarningBool = false;

    //Dragging Variables
    public TileData DragPayload { get; set; }
    public List<TileData> DragFrom { get; set; }
    public CourseRuntime BlockTypeFrom { get; set; }


    public int ErrorCount { get; set; }
    public int WarningCount { get; set; }

    //Updates the degree plan after a drag
    public async Task UpdateDegreePlanAsync(List<TileData> dragTo, TileData draggedOn, CourseRuntime blockTypeTo)
    {
        if (((blockTypeTo & DragPayload.Runtime) > 0 || DragPayload.Course == null) && ((BlockTypeFrom & draggedOn.Runtime) > 0 || draggedOn.Course == null))
        {
            Utilities.SwapValues(courseData, DragPayload, draggedOn);
            draggedOn.Status = 0;
            DragPayload.Status = 0;
            StateHasChanged();
        }
    }

    //Boolean to show the ghost tiles
    public bool ShowGhosts { get; set; } = false;
    //Show all ghost tiles in the plan
    public void ShowGhostTiles()
    {
        //Show a ghost tile in all places where the tile can be added
        ShowGhosts = true;
        StateHasChanged();
    }

    //Hide all ghost tiles in the plan
    public void HideGhostTiles()
    {
        //remove the ghost tiles
        ShowGhosts = false;
        StateHasChanged();
    }

    //Move payload from one slot to a new slot
    public void MovePayloadTo(TileSlot slot)
    {
        //Made design decision to handle this hear, saves intensive cascading parameters.
        //Leaving this note here as I may decide to change later.
        slot.Tiles.Add(DragPayload);
        DragFrom.Remove(DragPayload);
        DragPayload.Status = 0;
        FiftyUnitWarning(slot);
    }



    protected override async Task OnParametersSetAsync()
    {
        //JSON Management
        if (JSON != null)
        {
            //JSON Input
            SaveState state = JsonConvert.DeserializeObject<SaveState>(JSON);
            courseData = state.CourseData;
            BlocksPerYear = state.BlocksPerYear;
            UnitsPerBlock = state.UnitsPerBlock;
            Degree = state.Degree;
            Major = state.Major;
            CompletedCourses = state.CompletedCourses;
            Campus = state.Campus;
            RuntimeStart = state.RuntimeStart;
        }
        else
        {
            //Manaul input

            //Query database
            List<TileData> allCourseData = new List<TileData>();
            List<Course> coreCourses = (await DegreeCourseService.GetCoreCoursesAsync(Degree.DegreeID)).ToList();

            //Loop through pulled courses
            foreach (Course course in coreCourses)
            {
                //Create a tile data and add to list
                TileData td = new TileData()
                {
                    Course = course,
                    TileType = TileType.Core,
                    Runtime = await CourseService.GetCourseRuntimeAsync(course.CourseID, Campus)
                };

                allCourseData.Add(td);
            }

            var coreDirectedCourses = await MajorCourseService.GetCompulsoryCoursesAsync(Major.MajorID);
            //Pull directed courses
            foreach (Course course in coreDirectedCourses)
            {
                //Add to list
                TileData td = new TileData()
                {
                    Course = course,
                    TileType = TileType.Directed,
                    IsDirectedCore = true,
                    Runtime = await CourseService.GetCourseRuntimeAsync(course.CourseID, Campus)
                };

                allCourseData.Add(td);
            }

            List<TileData> tempCache = new List<TileData>();

            //Create all empty directed
            for (int i = 0; i < Degree.UnitLength - allCourseData.Sum(t => t.Course.Units) - (Degree.ElectiveCount * 10); i += 10)
            {
                TileData td = new TileData()
                {
                    Course = null,
                    TileType = TileType.Directed
                };
                tempCache.Add(td);
            }

            //Create all empty elective courses
            for (int i = 0; i < Degree.ElectiveCount; i++)
            {
                TileData td = new TileData()
                {
                    Course = null,
                    TileType = TileType.Elective
                };
                tempCache.Add(td);
            }

            //Add them to plan
            allCourseData.AddRange(tempCache);

            List<TileData> cache = allCourseData.OrderBy(c => c.Course?.CourseCode[4..] ?? "9999").ToList();

            output = SetupStructure(RuntimeStart == CourseRuntime.Semester2);

            int n = RuntimeStart == CourseRuntime.Semester2 ? 1 : 0;

            if (await Autocomplete(cache, n))
            {
                for(int i = 0; i < output.Count; i++)
                {
                    output[i] = output[i].OrderBy(c => c.Course?.CourseCode ?? "ZZZZ9999").ToList();
                }
                courseData = output;
            }
            else
            {
                // Throw toast error
            }


            /*
            List<TileData> tempCourses = new List<TileData>();

            while (cache.Count > 0)
            {
                if (tempCourses.Sum(t => (t.Course?.Units ?? 10)) >= UnitsPerBlock)
                {
                    courseData.Add(tempCourses);
                    tempCourses = new List<TileData>();
                }

                TileData tile = cache.First();
                cache.RemoveAt(0);
                //List<Course> missingPrerequisites = await FindMissingPrerequisites(BlockedCourses, tile.Course);
                //tile.Status = missingPrerequisites.Count > 0 ? ErrorStatus.Warning : 0;

                tempCourses.Add(tile);
                //Console.WriteLine(tile.Course.CourseCode);
            }
            courseData.Add(tempCourses);
            */
        }

        //Parameters set, modify as needed
        completedData = new List<TileData>();
        foreach (Course c in CompletedCourses)
        {
            TileData td = new TileData()
            {
                Course = c,
                TileType = TileType.Elective
            };
            completedData.Add(td);

        }
    }

    //Returns a list of missing prerequisite courses
    private async Task<List<Course>> FindMissingPrerequisites(List<List<TileData>> courses, Course course)
    {
        List<Course> pCourses = (await CourseService.GetPrerequisiteCoursesAsync(course.CourseID)).ToList();

        List<Course> missing = new List<Course>();

        foreach (Course pCourse in pCourses)
        {
            if (!courses.Any(c => c.Any(i => i.Course.CourseID == pCourse.CourseID)))
            {
                missing.Add(pCourse);
            }
        }

        return missing;
    }

    //Returns all courses in the plan
    public IEnumerable<Course> getAllCourses()
    {
        IEnumerable<Course> allC = new List<Course>();

        foreach (List<TileData> sem in courseData)
        {
            foreach (TileData td in sem)
            {
                allC.Append(td.Course);
            }
        }

        return allC;
    }

    public void FiftyUnitWarning(TileSlot slot)
    {
        if (slot.Tiles.Sum(c => c.Course?.Units ?? 10) == 50 && !fiftyUnitsWarningBool) //Change 50 to readonly total in later branch.
        {
        RenderFragment message =@<text>By including 50 units in a semester, you will have to go to the UON website and follow instructions in order to enrol in 50 units. Find it here at this link: <a href="https://askuon.newcastle.edu.au/app/answers/detail/a_id/1764/~/can-i-enrol-in-more-than-40-units-in-a-semester%3F">Click Here</a> </text>;
        ToastService.ShowToast(ToastLevel.Warning, message);
        fiftyUnitsWarningBool = true;
        }
    }
    //Returns true if the plan contains the course
    public bool ContainsCourse(Course course)
    {
        return courseData.Any(sem => sem.Any(c => (c.Course?.CourseID ?? -1) == course.CourseID));
    }


    //Returns string Serialized for JSON
    private string Serialize()
    {
        SaveState state = new SaveState()
        {
            Campus = this.Campus,
            CompletedCourses = this.CompletedCourses,
            Degree = this.Degree,
            BlocksPerYear = this.BlocksPerYear,
            CourseData = this.courseData,
            Major = this.Major,
            UnitsPerBlock = this.UnitsPerBlock,
            RuntimeStart = this.RuntimeStart
        };

        return JsonConvert.SerializeObject(state);
    }

    private List<List<TileData>> SetupStructure(bool sem2Start)
    {
        int yearCount = Degree.UnitLength / (UnitsPerBlock * BlocksPerYear);
        if (sem2Start)
            yearCount++;


        List<List<TileData>> toReturn = new List<List<TileData>>();

        for (int i = 0; i < yearCount; i++)
        {
            toReturn.Add(new List<TileData>());
            toReturn.Add(new List<TileData>());
        }

        return toReturn;
    }


    private List<List<TileData>> output;

    /// <summary>
    /// THE MAIN ALGORITHM
    /// </summary>
    private async Task<bool> Autocomplete(List<TileData> cache, int n)
    {
        if (cache.Count == 0)
            return true;

        int index = 0;
        bool flag = false;
        do
        {
            TileData td = cache[index++];
            if (output[n].Sum(c => c.Course?.Units ?? 10) >= UnitsPerBlock)
                n++;

            if (n >= Degree.UnitLength / UnitsPerBlock + (RuntimeStart == CourseRuntime.Semester2 ? 1 : 0))
                return false;

            while (!await ValidateCourse(td, n))
            {
                if (index == cache.Count)
                    return false;
                td = cache[index++];
            }

            //DisplayOutput();
            output[n].Add(td);
            if (StateHasAppeared())
            {
                output[n].Remove(td);
            }
            else
            {
                cache.RemoveAt(index - 1);
                flag = await Autocomplete(new List<TileData>(cache), n);
                if (!flag)
                {
                    output[n].Remove(td);
                }
                cache.Insert(index - 1, td);
            }
        }
        while (!flag && index < cache.Count);

        return flag;
    }

    private async Task<bool> ValidateCourse(TileData td, int n)
    {
        bool flag = true;

        int groupNumber = (n - (RuntimeStart == CourseRuntime.Semester2 ? 1 : 0)) / 2 + 1;

        int minDirectedGroup = int.Parse((await MajorCourseService.GetAllDirectedCoursesAsync(Major.MajorID)).ToList().Min(c => c.CourseCode[4]).ToString());

        if (td.Course == null)
        {
            if (td.TileType == TileType.Directed && minDirectedGroup <= groupNumber)
                return true;
            else if (td.TileType == TileType.Elective)
                return true;
            else
                return false;
        }

        if (n % 2 == 0 && (td.Runtime & CourseRuntime.Semester1) == 0)
            flag = false;
        else if (n % 2 == 1 && (td.Runtime & CourseRuntime.Semester2) == 0)
            flag = false;
        else if (n > 0 && td.Course.CourseCode == "COMP3851B" && !output[n - 1].Any(c => (c.Course?.CourseCode ?? "lmfao") == "COMP3851A"))
            flag = false;
        else if (int.Parse(td.Course.CourseCode[4].ToString()) > groupNumber)
            flag = false;
        else if (!await CheckPrerequisites(td, n))
            flag = false;

        return flag;
    }

    private void DisplayOutput()
    {
        int n = 0;
        foreach (List<TileData> block in output)
        {
            Console.Write("|");
            foreach (TileData td in block)
            {
                Console.Write(" ");
                Console.Write(td.Course?.CourseCode ?? "Blank");
                Console.Write(" ");
            }
            Console.Write("|");
            if (n++ % 2 == 1)
                Console.WriteLine();
        }
    }

    private List<int> states = new List<int>();
    private bool StateHasAppeared()
    {
        int hash = EncodeOutput();
        if (states.Contains(hash))
            return true;
        states.Add(hash);
        return false;
    }

    private int EncodeOutput()
    {
        string hashStr = "";
        foreach (List<TileData> block in output)
        {
            foreach (TileData td in block.OrderBy(c => c.Course?.CourseCode ?? "9999"))
            {
                if (td.Course != null)
                {
                    hashStr += td.Course.CourseCode;
                }
                else
                {
                    hashStr += "BLANK";
                }
            }
        }
        return hashStr.GetHashCode();
    }

    private async Task<bool> CheckPrerequisites(TileData tile, int n)
    {
        if (tile.Course == null)
            return true;

        var courseList = (await CourseService.GetPrerequisiteCoursesAsync(tile.Course.CourseID)).ToList();

        int tally = 0;
        for (int i = 0; i < n; i++)
        {
            tally += courseList.Count(c => output[i].Any(t => t.Course?.CourseCode == c.CourseCode));
        }

        return tally == courseList.Count();
    }

    private void AddYear()
    {
        courseData.Add(new List<TileData>());
        courseData.Add(new List<TileData>());
        StateHasChanged();
    }


}
