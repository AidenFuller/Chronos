@inject DegreeCourseService DegreeCourseService
@inject DegreeService DegreeService
@inject CourseService CourseService 

<div class="degreePlan">
    <CascadingValue Value="this">
        @*Pass boolean to determine if ghosts are showing to all children*@
        <CascadingValue Value="@showGhosts" Name="showGhosts">
            @*In future, potential to remove this cascading parameter*@
            <CascadingValue Value="@DragPayload" Name="DragPayLoad">
                @if (BlockedCourses == null)
                {
                    <p>Loading...</p>
                }
                else
                {
                    for (int j = 0; j < (BlockedCourses.Count + 1) / BlocksPerYear; j++)
                    {

                        //Semester
                        <div class="year-row">
                            @for (int i = 0; i < BlocksPerYear; i++)
                            {
                                if (i + (j * BlocksPerYear) >= BlockedCourses.Count)
                                {
                                    continue;
                                }
                                //Course
                                <div class="semester">
                                    @* Assuming Semesters *@

                                    @if (i == 0)
                                    {
                                        //Semester 1
                                        <TileSlot Tiles="@BlockedCourses[i+(j*BlocksPerYear)]" BlockType=@Models.Enums.CourseRuntime.Semester1 showGhosts=@showGhosts />
                                    }
                                    else
                                    {
                                        //Semester 2
                                        <TileSlot Tiles="@BlockedCourses[i+(j*BlocksPerYear)]" BlockType=@Models.Enums.CourseRuntime.Semester2 showGhosts=@showGhosts />
                                    }

                                </div>
                            }
                        </div>
                    }
                }
            </CascadingValue>
        </CascadingValue>
        </CascadingValue>
</div>


@code {
    [Parameter] public int BlocksPerYear { get; set; } = 2;
    [Parameter] public int UnitsPerBlock { get; set; } = 40;
    [Parameter] public int DegreeID { get; set; }
    [Parameter] public Major Major { get; set; }

    private Degree Degree;
    private List<List<TileData>> BlockedCourses;
    private int blockSize = 2;

    public TileData DragPayload { get; set; }
    public List<TileData> DragFrom { get; set; }

    public int ErrorCount { get; set; }
    public int WarningCount { get; set; }

    public async Task UpdateDegreePlanAsync(List<TileData> dragTo, TileData draggedOn)
    {
        Utilities.SwapValues(BlockedCourses, DragPayload, draggedOn);
        draggedOn.Status = 0;
        DragPayload.Status = 0;
        StateHasChanged();
    }

    //Boolean to show the ghost tiles
    private bool showGhosts = false;
    //Show the ghost tiles in each plan
    public void showGhostTiles()
    {
        //Show a ghost tile in all places where the tile can be added

        Course c = DragPayload.Course;
        showGhosts = true;
        //For each tile slot
        StateHasChanged();
    }
    public void hideGhostTiles() {
        //remove the ghost tiles
        showGhosts = false;
        StateHasChanged();
    }

    public void movePayloadTo(TileSlot slot)
    {
        //Made design decision to handle this hear, saves intensive cascading parameters.
        //Leaving this note here as I may decide to change later.
        slot.Tiles.Add(DragPayload);
        DragFrom.Remove(DragPayload);
        
        
    }



    protected override async Task OnParametersSetAsync()
    {
        Degree = await DegreeService.GetDegreeAsync(DegreeID);
        var courses = await DegreeCourseService.GetCoreCoursesAsync(DegreeID);

        int countPerBlock = UnitsPerBlock / 10;

        Queue<Course> cache = new Queue<Course>(courses.OrderBy(c => c.CourseCode[4..]));

        // ALGORITHM

        if (BlockedCourses == null)
        {
            BlockedCourses = new List<List<TileData>>();
            while (cache.Count > 0)
            {
                List<TileData> tempCourses = new List<TileData>();
                int loopCount = Math.Min(cache.Count, countPerBlock);
                for (int j = 0; j < loopCount; j++)
                {
                    Course c = cache.Dequeue();

                    List<Course> missingPrerequisites = await FindMissingPrerequisites(BlockedCourses, c);

                    TileData tile = new TileData();
                    tile.Course = c;
                    tile.Status = missingPrerequisites.Count > 0 ? ErrorStatus.Warning : 0;

                    tempCourses.Add(tile);

                    Console.WriteLine(c.CourseCode);
                }
                BlockedCourses.Add(tempCourses);
            }
        }
    }

    private async Task<List<Course>> FindMissingPrerequisites(List<List<TileData>> courses, Course course)
    {
        List<Course> pCourses = (await CourseService.GetPrerequisiteCoursesAsync(course.CourseID)).ToList();

        List<Course> missing = new List<Course>();

        foreach(Course pCourse in pCourses)
        {
            if (!courses.Any(c => c.Any(i => i.Course.CourseID == pCourse.CourseID)))
            {
                missing.Add(pCourse);
            }
        }

        return missing;
    }


}
