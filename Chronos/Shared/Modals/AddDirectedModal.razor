@inject MajorCourseService MajorCourseService
@using Models.Enums;
<div class="directed-modal">

    <BlazoredTypeahead SearchMethod="SearchMajorCourses" @bind-Value="SelectedCourse" placeholder="Please search for your directected course..." EnableDropDown="true">
        <SelectedTemplate Context="course">
            <!--This is the search Template and what will be returned.-->

            @if (course.Runtime == SemType)
            {
                <span>@course.CourseCode</span> <span>(@course.Name)</span> <span>@course.Runtime</span>


            }
            else
            {
                <span>@course.CourseCode</span> <span>(@course.Name)</span> <span>@course.Runtime</span>
            }



        </SelectedTemplate>
        <ResultTemplate Context="course">
            <!--This is what is shown when it is selected.-->
            @if (course.Runtime != SemType)
            {
                @*<div style="z-index:11; background-color:red; padding:0px;">
                        @course.Name -@course.Runtime
                    </div>*@
                <span>@course.CourseCode</span> <span>(@course.Name)</span> <span>@course.Runtime</span>


            }
            else
            {
                <span>@course.CourseCode</span> <span>(@course.Name)</span> <span>@course.Runtime</span>
            }


        </ResultTemplate>


    </BlazoredTypeahead>
    <div style="width:100%; text-align: center">

            <button class="btn btn-primary" type="submit" style="margin-top: 20px;" @onclick="SubmitForm">Submit</button>
        
    </div>

</div>


@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }
    //[CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public DegreePlan Plan { get; set; }
    [Parameter] public CourseRuntime SemType { get; set; }

    private Course SelectedCourse;

    private String emptyStr = "";
    //private IEnumerable<Course> courses;

    protected override async Task OnParametersSetAsync()
    {
        //Potential to have this stored in the plan as to not query the db every time.
        //courses = await MajorCourseService.GetCoreDirectedCoursesAsync(Plan.Major.MajorID);
    }


    private async Task<IEnumerable<Course>> SearchMajorCourses(string search)
    {
        if (Plan.Degree == null)
        {
            return new List<Course>();
        }
        IEnumerable<Course> courses = await MajorCourseService.GetNonCompulsoryCoursesAsync(Plan.Major.MajorID);
        
        return await Task.FromResult(courses.Where(x => x.Name.ToLower().Contains(search.ToLower())).ToList()); //It will return degrees that contain the string in its name.
    }

    void SubmitForm()
    {
        @if (SelectedCourse.Runtime == SemType)
        {
            ModalInstance.CloseAsync(ModalResult.Ok(SelectedCourse));


        }
        else
        {
        }
        
    }
}
